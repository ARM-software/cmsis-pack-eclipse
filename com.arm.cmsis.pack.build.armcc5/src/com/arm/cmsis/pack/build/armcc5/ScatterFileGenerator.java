/*******************************************************************************
* Copyright (c) 2015 ARM Ltd. and others
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
* ARM Ltd and ARM Germany GmbH - Initial API and implementation
*******************************************************************************/

package com.arm.cmsis.pack.build.armcc5;


import java.util.Map;
import java.util.Map.Entry;

import org.eclipse.core.runtime.CoreException;

import com.arm.cmsis.pack.build.settings.ILinkerScriptGenerator;
import com.arm.cmsis.pack.build.settings.IMemorySettings;
import com.arm.cmsis.pack.common.CmsisConstants;
import com.arm.cmsis.pack.generic.IAttributes;

/**
 * Scatter file generator for ARMCC 5 compiler 
 */
public class ScatterFileGenerator implements ILinkerScriptGenerator {

	final static private String BAR_COMMENT = "; *************************************************************";  //$NON-NLS-1$
	final static private String HEAD_COMMENT = "; ** Scatter-Loading Description File generated by RTE CMSIS Plug-in **";//$NON-NLS-1$
			   								   
	final static private String _UNINIT_ = " UNINIT "; //$NON-NLS-1$
	final static private String SPACE  = " "; //$NON-NLS-1$
	final static private String SCT  = "sct"; //$NON-NLS-1$
	
	StringBuilder sb;
	
	@Override
	public String generate(IMemorySettings memorySetttings) throws CoreException {
		if(memorySetttings == null)
			return null;
		sb = new StringBuilder(BAR_COMMENT);
		sb.append(System.lineSeparator());
		sb.append(HEAD_COMMENT);
		sb.append(System.lineSeparator());
		sb.append(BAR_COMMENT);
		sb.append(System.lineSeparator());
		sb.append(System.lineSeparator());
		
		if( !generateStartupRom(memorySetttings))
			return null;
		generateRemainingRoms(memorySetttings);
		sb.append(System.lineSeparator());
		return sb.toString();
	}

	private boolean generateStartupRom(IMemorySettings memorySetttings) {
		
		String id = memorySetttings.getStartupRegionId();
		IAttributes a =  memorySetttings.getRegion(id);
		if(a == null)
			return false;
		generateAddressLine("LR_", id, " {    ; load region size_region", a, false);  //$NON-NLS-1$//$NON-NLS-2$
		generateAddressLine("  ER_", id, " {  ; load address = execution address", a, false); //$NON-NLS-1$ //$NON-NLS-2$
		sb.append("   *.o (RESET, +First)").append(System.lineSeparator()); //$NON-NLS-1$
		sb.append("   *(InRoot$$Sections)").append(System.lineSeparator()); //$NON-NLS-1$
		sb.append("   .ANY (+RO)").append(System.lineSeparator()); //$NON-NLS-1$
		sb.append("  }").append(System.lineSeparator()); //$NON-NLS-1$
		
		generateDefaultRams(memorySetttings); 

		sb.append("}").append(System.lineSeparator()); //$NON-NLS-1$
		return true;
	}

	private void generateDefaultRams(IMemorySettings memorySetttings) {
		Map<String, IAttributes> entries = memorySetttings.getRegions();
		for(Entry<String, IAttributes> e : entries.entrySet()) {
			String id = e.getKey();
			if(!id.startsWith("IRAM")) //$NON-NLS-1$
				continue;
			IAttributes a =  e.getValue();
			if(!a.getAttributeAsBoolean(CmsisConstants.DEFAULT, false))
				continue;
			generateAddressLine("  RW_", id, " {", a, true); //$NON-NLS-1$ //$NON-NLS-2$
			sb.append("   .ANY (+RW +ZI)").append(System.lineSeparator()); //$NON-NLS-1$
			sb.append("  }").append(System.lineSeparator()); //$NON-NLS-1$
		}

	}	

	private void generateRemainingRoms(IMemorySettings memorySetttings) {

		Map<String, IAttributes> entries = memorySetttings.getRegions();
		for(Entry<String, IAttributes> e : entries.entrySet()) {
			String id = e.getKey();
			if(!id.startsWith("IROM")) //$NON-NLS-1$
				continue;
			if(id.equals(memorySetttings.getStartupRegionId()))
				continue;
			IAttributes a =  e.getValue();

			generateAddressLine("LR_", id, " {", a, false);  //$NON-NLS-1$//$NON-NLS-2$
			generateAddressLine("  ER_", id, " {  ; load address = execution address", a, false); //$NON-NLS-1$ //$NON-NLS-2$
			sb.append("   .ANY (+RO)").append(System.lineSeparator()); //$NON-NLS-1$
			sb.append("  }").append(System.lineSeparator()); //$NON-NLS-1$
			sb.append("}").append(System.lineSeparator()); //$NON-NLS-1$
		}
	}
	
	private void generateAddressLine(String prefix, String id, String suffix, IAttributes a, boolean bRam){
		String start = a.getAttribute(CmsisConstants.START, CmsisConstants.EMPTY_STRING);
		String size =  a.getAttribute(CmsisConstants.SIZE, CmsisConstants.EMPTY_STRING);
		String uninit = (bRam && a.getAttributeAsBoolean(CmsisConstants.INIT, false)) ? _UNINIT_ : SPACE;
		sb.append(prefix);
		
		sb.append(id);
		sb.append(SPACE);
		sb.append(start);
		sb.append(uninit);
		sb.append(size);
		sb.append(suffix);
		sb.append(System.lineSeparator());
	}

	@Override
	public String getFileExtension() {
		return SCT;
	}

}
