/*
 * generated by Xtext 2.10.0
 */
package com.arm.cmsis.pack.debugseq.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DebugSeqGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DebugSeqModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.DebugSeqModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDebugvarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDebugvarsDebugVarsParserRuleCall_0_0 = (RuleCall)cDebugvarsAssignment_0.eContents().get(0);
		private final Assignment cSequencesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSequencesSequencesParserRuleCall_1_0 = (RuleCall)cSequencesAssignment_1.eContents().get(0);
		
		//DebugSeqModel:
		//	debugvars=DebugVars
		//	sequences=Sequences?;
		@Override public ParserRule getRule() { return rule; }
		
		//debugvars=DebugVars sequences=Sequences?
		public Group getGroup() { return cGroup; }
		
		//debugvars=DebugVars
		public Assignment getDebugvarsAssignment_0() { return cDebugvarsAssignment_0; }
		
		//DebugVars
		public RuleCall getDebugvarsDebugVarsParserRuleCall_0_0() { return cDebugvarsDebugVarsParserRuleCall_0_0; }
		
		//sequences=Sequences?
		public Assignment getSequencesAssignment_1() { return cSequencesAssignment_1; }
		
		//Sequences
		public RuleCall getSequencesSequencesParserRuleCall_1_0() { return cSequencesSequencesParserRuleCall_1_0; }
	}
	public class DebugVarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.DebugVars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDebugVarsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDebugvarsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cConfigfileKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cConfigfileAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cConfigfileSTRINGTerminalRuleCall_2_0_1_0 = (RuleCall)cConfigfileAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cVersionKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cVersionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cVersionSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cVersionAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cPnameKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cPnameAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cPnameSTRINGTerminalRuleCall_2_2_1_0 = (RuleCall)cPnameAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cDebugvarsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DebugVars:
		//	{DebugVars} '<debugvars' (('configfile=' configfile=STRING)? & ('version=' version=STRING)? & ('Pname='
		//	pname=STRING)?) '>'
		//	statements+=Statement*
		//	'</debugvars>';
		@Override public ParserRule getRule() { return rule; }
		
		//{DebugVars} '<debugvars' (('configfile=' configfile=STRING)? & ('version=' version=STRING)? & ('Pname=' pname=STRING)?)
		//'>' statements+=Statement* '</debugvars>'
		public Group getGroup() { return cGroup; }
		
		//{DebugVars}
		public Action getDebugVarsAction_0() { return cDebugVarsAction_0; }
		
		//'<debugvars'
		public Keyword getDebugvarsKeyword_1() { return cDebugvarsKeyword_1; }
		
		//(('configfile=' configfile=STRING)? & ('version=' version=STRING)? & ('Pname=' pname=STRING)?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//('configfile=' configfile=STRING)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'configfile='
		public Keyword getConfigfileKeyword_2_0_0() { return cConfigfileKeyword_2_0_0; }
		
		//configfile=STRING
		public Assignment getConfigfileAssignment_2_0_1() { return cConfigfileAssignment_2_0_1; }
		
		//STRING
		public RuleCall getConfigfileSTRINGTerminalRuleCall_2_0_1_0() { return cConfigfileSTRINGTerminalRuleCall_2_0_1_0; }
		
		//('version=' version=STRING)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'version='
		public Keyword getVersionKeyword_2_1_0() { return cVersionKeyword_2_1_0; }
		
		//version=STRING
		public Assignment getVersionAssignment_2_1_1() { return cVersionAssignment_2_1_1; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_2_1_1_0() { return cVersionSTRINGTerminalRuleCall_2_1_1_0; }
		
		//('Pname=' pname=STRING)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'Pname='
		public Keyword getPnameKeyword_2_2_0() { return cPnameKeyword_2_2_0; }
		
		//pname=STRING
		public Assignment getPnameAssignment_2_2_1() { return cPnameAssignment_2_2_1; }
		
		//STRING
		public RuleCall getPnameSTRINGTerminalRuleCall_2_2_1_0() { return cPnameSTRINGTerminalRuleCall_2_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
		
		//'</debugvars>'
		public Keyword getDebugvarsKeyword_5() { return cDebugvarsKeyword_5; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDeclarationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Statement:
		//	VariableDeclaration ';' | Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//VariableDeclaration ';' | Expression ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableDeclaration ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0_0() { return cVariableDeclarationParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//Expression ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_0() { return cExpressionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c__varKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//VariableDeclaration:
		//	'__var' name=ID '=' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'__var' name=ID '=' value=Expression
		public Group getGroup() { return cGroup; }
		
		//'__var'
		public Keyword get__varKeyword_0() { return c__varKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
	}
	public class SequencesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.Sequences");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSequencesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSequencesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSequencesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSequencesSequenceParserRuleCall_2_0 = (RuleCall)cSequencesAssignment_2.eContents().get(0);
		private final Keyword cSequencesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Sequences:
		//	{Sequences} '<sequences>'
		//	sequences+=Sequence*
		//	'</sequences>';
		@Override public ParserRule getRule() { return rule; }
		
		//{Sequences} '<sequences>' sequences+=Sequence* '</sequences>'
		public Group getGroup() { return cGroup; }
		
		//{Sequences}
		public Action getSequencesAction_0() { return cSequencesAction_0; }
		
		//'<sequences>'
		public Keyword getSequencesKeyword_1() { return cSequencesKeyword_1; }
		
		//sequences+=Sequence*
		public Assignment getSequencesAssignment_2() { return cSequencesAssignment_2; }
		
		//Sequence
		public RuleCall getSequencesSequenceParserRuleCall_2_0() { return cSequencesSequenceParserRuleCall_2_0; }
		
		//'</sequences>'
		public Keyword getSequencesKeyword_3() { return cSequencesKeyword_3; }
	}
	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.Sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSequenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cNameKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_0_2_0 = (RuleCall)cNameAssignment_1_0_2.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cDisableKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cDisableAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cDisableDECTerminalRuleCall_1_1_2_0 = (RuleCall)cDisableAssignment_1_1_2.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Group cGroup_1_2 = (Group)cUnorderedGroup_1.eContents().get(2);
		private final Keyword cPnameKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cPnameAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cPnameSTRINGTerminalRuleCall_1_2_1_0 = (RuleCall)cPnameAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cUnorderedGroup_1.eContents().get(3);
		private final Keyword cInfoKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cInfoAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cInfoSTRINGTerminalRuleCall_1_3_1_0 = (RuleCall)cInfoAssignment_1_3_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cCodeblocksAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cCodeblocksCodeBlockParserRuleCall_2_0_1_0 = (RuleCall)cCodeblocksAssignment_2_0_1.eContents().get(0);
		private final Keyword cSequenceKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Keyword cSolidusGreaterThanSignKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//Sequence:
		//	'<sequence' ('name=' '"' name=ID '"' & ('disable=' '"' disable=DEC '"')? & ('Pname=' pname=STRING)? & ('info='
		//	info=STRING)?) ('>' codeblocks+=CodeBlock* '</sequence>' | '/>');
		@Override public ParserRule getRule() { return rule; }
		
		//'<sequence' ('name=' '"' name=ID '"' & ('disable=' '"' disable=DEC '"')? & ('Pname=' pname=STRING)? & ('info='
		//info=STRING)?) ('>' codeblocks+=CodeBlock* '</sequence>' | '/>')
		public Group getGroup() { return cGroup; }
		
		//'<sequence'
		public Keyword getSequenceKeyword_0() { return cSequenceKeyword_0; }
		
		//('name=' '"' name=ID '"' & ('disable=' '"' disable=DEC '"')? & ('Pname=' pname=STRING)? & ('info=' info=STRING)?)
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//'name=' '"' name=ID '"'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'name='
		public Keyword getNameKeyword_1_0_0() { return cNameKeyword_1_0_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_1_0_1() { return cQuotationMarkKeyword_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0_2() { return cNameAssignment_1_0_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_2_0() { return cNameIDTerminalRuleCall_1_0_2_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_1_0_3() { return cQuotationMarkKeyword_1_0_3; }
		
		//('disable=' '"' disable=DEC '"')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'disable='
		public Keyword getDisableKeyword_1_1_0() { return cDisableKeyword_1_1_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_1_1_1() { return cQuotationMarkKeyword_1_1_1; }
		
		//disable=DEC
		public Assignment getDisableAssignment_1_1_2() { return cDisableAssignment_1_1_2; }
		
		//DEC
		public RuleCall getDisableDECTerminalRuleCall_1_1_2_0() { return cDisableDECTerminalRuleCall_1_1_2_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_1_1_3() { return cQuotationMarkKeyword_1_1_3; }
		
		//('Pname=' pname=STRING)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'Pname='
		public Keyword getPnameKeyword_1_2_0() { return cPnameKeyword_1_2_0; }
		
		//pname=STRING
		public Assignment getPnameAssignment_1_2_1() { return cPnameAssignment_1_2_1; }
		
		//STRING
		public RuleCall getPnameSTRINGTerminalRuleCall_1_2_1_0() { return cPnameSTRINGTerminalRuleCall_1_2_1_0; }
		
		//('info=' info=STRING)?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'info='
		public Keyword getInfoKeyword_1_3_0() { return cInfoKeyword_1_3_0; }
		
		//info=STRING
		public Assignment getInfoAssignment_1_3_1() { return cInfoAssignment_1_3_1; }
		
		//STRING
		public RuleCall getInfoSTRINGTerminalRuleCall_1_3_1_0() { return cInfoSTRINGTerminalRuleCall_1_3_1_0; }
		
		//('>' codeblocks+=CodeBlock* '</sequence>' | '/>')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'>' codeblocks+=CodeBlock* '</sequence>'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_0_0() { return cGreaterThanSignKeyword_2_0_0; }
		
		//codeblocks+=CodeBlock*
		public Assignment getCodeblocksAssignment_2_0_1() { return cCodeblocksAssignment_2_0_1; }
		
		//CodeBlock
		public RuleCall getCodeblocksCodeBlockParserRuleCall_2_0_1_0() { return cCodeblocksCodeBlockParserRuleCall_2_0_1_0; }
		
		//'</sequence>'
		public Keyword getSequenceKeyword_2_0_2() { return cSequenceKeyword_2_0_2; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_2_1() { return cSolidusGreaterThanSignKeyword_2_1; }
	}
	public class CodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.CodeBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cControlParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CodeBlock:
		//	Block | Control;
		@Override public ParserRule getRule() { return rule; }
		
		//Block | Control
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Block
		public RuleCall getBlockParserRuleCall_0() { return cBlockParserRuleCall_0; }
		
		//Control
		public RuleCall getControlParserRuleCall_1() { return cControlParserRuleCall_1; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBlockKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cAtomicKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cAtomicAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cAtomicDECTerminalRuleCall_2_0_2_0 = (RuleCall)cAtomicAssignment_2_0_2.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cInfoKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cInfoAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cInfoSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cInfoAssignment_2_1_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cStatementsAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_3_0_1_0 = (RuleCall)cStatementsAssignment_3_0_1.eContents().get(0);
		private final Keyword cBlockKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Keyword cSolidusGreaterThanSignKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//Block:
		//	{Block} '<block' (('atomic=' '"' atomic=DEC '"')? & ('info=' info=STRING)?) ('>' statements+=Statement* '</block>' |
		//	'/>');
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} '<block' (('atomic=' '"' atomic=DEC '"')? & ('info=' info=STRING)?) ('>' statements+=Statement* '</block>' |
		//'/>')
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'<block'
		public Keyword getBlockKeyword_1() { return cBlockKeyword_1; }
		
		//(('atomic=' '"' atomic=DEC '"')? & ('info=' info=STRING)?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//('atomic=' '"' atomic=DEC '"')?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'atomic='
		public Keyword getAtomicKeyword_2_0_0() { return cAtomicKeyword_2_0_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_2_0_1() { return cQuotationMarkKeyword_2_0_1; }
		
		//atomic=DEC
		public Assignment getAtomicAssignment_2_0_2() { return cAtomicAssignment_2_0_2; }
		
		//DEC
		public RuleCall getAtomicDECTerminalRuleCall_2_0_2_0() { return cAtomicDECTerminalRuleCall_2_0_2_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_2_0_3() { return cQuotationMarkKeyword_2_0_3; }
		
		//('info=' info=STRING)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'info='
		public Keyword getInfoKeyword_2_1_0() { return cInfoKeyword_2_1_0; }
		
		//info=STRING
		public Assignment getInfoAssignment_2_1_1() { return cInfoAssignment_2_1_1; }
		
		//STRING
		public RuleCall getInfoSTRINGTerminalRuleCall_2_1_1_0() { return cInfoSTRINGTerminalRuleCall_2_1_1_0; }
		
		//('>' statements+=Statement* '</block>' | '/>')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'>' statements+=Statement* '</block>'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_0_0() { return cGreaterThanSignKeyword_3_0_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3_0_1() { return cStatementsAssignment_3_0_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0_1_0() { return cStatementsStatementParserRuleCall_3_0_1_0; }
		
		//'</block>'
		public Keyword getBlockKeyword_3_0_2() { return cBlockKeyword_3_0_2; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_3_1() { return cSolidusGreaterThanSignKeyword_3_1; }
	}
	public class ControlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.Control");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cControlAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cControlKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cIfKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cIfAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cIfExpressionParserRuleCall_2_0_2_0 = (RuleCall)cIfAssignment_2_0_2.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cWhileKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cWhileAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cWhileExpressionParserRuleCall_2_1_2_0 = (RuleCall)cWhileAssignment_2_1_2.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cTimeoutKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Assignment cTimeoutAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cTimeoutDECTerminalRuleCall_2_2_2_0 = (RuleCall)cTimeoutAssignment_2_2_2.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2_2_3 = (Keyword)cGroup_2_2.eContents().get(3);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cInfoKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cInfoAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cInfoSTRINGTerminalRuleCall_2_3_1_0 = (RuleCall)cInfoAssignment_2_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cCodeblocksAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cCodeblocksCodeBlockParserRuleCall_3_0_1_0 = (RuleCall)cCodeblocksAssignment_3_0_1.eContents().get(0);
		private final Keyword cControlKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Keyword cSolidusGreaterThanSignKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//Control:
		//	{Control} '<control' (('if=' '"' if=Expression '"')? & ('while=' '"' while=Expression '"')? & ('timeout=' '"'
		//	timeout=DEC '"')? & ('info=' info=STRING)?) ('>' codeblocks+=CodeBlock* '</control>' | '/>');
		@Override public ParserRule getRule() { return rule; }
		
		//{Control} '<control' (('if=' '"' if=Expression '"')? & ('while=' '"' while=Expression '"')? & ('timeout=' '"'
		//timeout=DEC '"')? & ('info=' info=STRING)?) ('>' codeblocks+=CodeBlock* '</control>' | '/>')
		public Group getGroup() { return cGroup; }
		
		//{Control}
		public Action getControlAction_0() { return cControlAction_0; }
		
		//'<control'
		public Keyword getControlKeyword_1() { return cControlKeyword_1; }
		
		//(('if=' '"' if=Expression '"')? & ('while=' '"' while=Expression '"')? & ('timeout=' '"' timeout=DEC '"')? & ('info='
		//info=STRING)?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//('if=' '"' if=Expression '"')?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'if='
		public Keyword getIfKeyword_2_0_0() { return cIfKeyword_2_0_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_2_0_1() { return cQuotationMarkKeyword_2_0_1; }
		
		//if=Expression
		public Assignment getIfAssignment_2_0_2() { return cIfAssignment_2_0_2; }
		
		//Expression
		public RuleCall getIfExpressionParserRuleCall_2_0_2_0() { return cIfExpressionParserRuleCall_2_0_2_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_2_0_3() { return cQuotationMarkKeyword_2_0_3; }
		
		//('while=' '"' while=Expression '"')?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'while='
		public Keyword getWhileKeyword_2_1_0() { return cWhileKeyword_2_1_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_2_1_1() { return cQuotationMarkKeyword_2_1_1; }
		
		//while=Expression
		public Assignment getWhileAssignment_2_1_2() { return cWhileAssignment_2_1_2; }
		
		//Expression
		public RuleCall getWhileExpressionParserRuleCall_2_1_2_0() { return cWhileExpressionParserRuleCall_2_1_2_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_2_1_3() { return cQuotationMarkKeyword_2_1_3; }
		
		//('timeout=' '"' timeout=DEC '"')?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'timeout='
		public Keyword getTimeoutKeyword_2_2_0() { return cTimeoutKeyword_2_2_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_2_2_1() { return cQuotationMarkKeyword_2_2_1; }
		
		//timeout=DEC
		public Assignment getTimeoutAssignment_2_2_2() { return cTimeoutAssignment_2_2_2; }
		
		//DEC
		public RuleCall getTimeoutDECTerminalRuleCall_2_2_2_0() { return cTimeoutDECTerminalRuleCall_2_2_2_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_2_2_3() { return cQuotationMarkKeyword_2_2_3; }
		
		//('info=' info=STRING)?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//'info='
		public Keyword getInfoKeyword_2_3_0() { return cInfoKeyword_2_3_0; }
		
		//info=STRING
		public Assignment getInfoAssignment_2_3_1() { return cInfoAssignment_2_3_1; }
		
		//STRING
		public RuleCall getInfoSTRINGTerminalRuleCall_2_3_1_0() { return cInfoSTRINGTerminalRuleCall_2_3_1_0; }
		
		//('>' codeblocks+=CodeBlock* '</control>' | '/>')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'>' codeblocks+=CodeBlock* '</control>'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_0_0() { return cGreaterThanSignKeyword_3_0_0; }
		
		//codeblocks+=CodeBlock*
		public Assignment getCodeblocksAssignment_3_0_1() { return cCodeblocksAssignment_3_0_1; }
		
		//CodeBlock
		public RuleCall getCodeblocksCodeBlockParserRuleCall_3_0_1_0() { return cCodeblocksCodeBlockParserRuleCall_3_0_1_0; }
		
		//'</control>'
		public Keyword getControlKeyword_3_0_2() { return cControlKeyword_3_0_2; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_3_1() { return cSolidusGreaterThanSignKeyword_3_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.Expression");
		private final RuleCall cAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Assignment;
		@Override public ParserRule getRule() { return rule; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall() { return cAssignmentParserRuleCall; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTernaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAssignmentLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpPlusSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpHyphenMinusEqualsSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpAsteriskEqualsSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOpSolidusEqualsSignKeyword_1_1_0_4 = (Keyword)cOpAlternatives_1_1_0.eContents().get(4);
		private final Keyword cOpPercentSignEqualsSignKeyword_1_1_0_5 = (Keyword)cOpAlternatives_1_1_0.eContents().get(5);
		private final Keyword cOpLtLtKeyword_1_1_0_6 = (Keyword)cOpAlternatives_1_1_0.eContents().get(6);
		private final Keyword cOpGtGtKeyword_1_1_0_7 = (Keyword)cOpAlternatives_1_1_0.eContents().get(7);
		private final Keyword cOpAmpKeyword_1_1_0_8 = (Keyword)cOpAlternatives_1_1_0.eContents().get(8);
		private final Keyword cOpCircumflexAccentEqualsSignKeyword_1_1_0_9 = (Keyword)cOpAlternatives_1_1_0.eContents().get(9);
		private final Keyword cOpVerticalLineEqualsSignKeyword_1_1_0_10 = (Keyword)cOpAlternatives_1_1_0.eContents().get(10);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Assignment Expression:
		//	Ternary ({Assignment.left=current} op=('=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&lt;&lt;=' | '&gt;&gt;=' | '&amp;='
		//	| '^=' | '|=') right=Expression)?
		@Override public ParserRule getRule() { return rule; }
		
		//Ternary ({Assignment.left=current} op=('=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&lt;&lt;=' | '&gt;&gt;=' | '&amp;=' |
		//'^=' | '|=') right=Expression)?
		public Group getGroup() { return cGroup; }
		
		//Ternary
		public RuleCall getTernaryParserRuleCall_0() { return cTernaryParserRuleCall_0; }
		
		//({Assignment.left=current} op=('=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&lt;&lt;=' | '&gt;&gt;=' | '&amp;=' | '^=' |
		//'|=') right=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Assignment.left=current}
		public Action getAssignmentLeftAction_1_0() { return cAssignmentLeftAction_1_0; }
		
		//op=('=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&lt;&lt;=' | '&gt;&gt;=' | '&amp;=' | '^=' | '|=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&lt;&lt;=' | '&gt;&gt;=' | '&amp;=' | '^=' | '|=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'='
		public Keyword getOpEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignKeyword_1_1_0_0; }
		
		//'+='
		public Keyword getOpPlusSignEqualsSignKeyword_1_1_0_1() { return cOpPlusSignEqualsSignKeyword_1_1_0_1; }
		
		//'-='
		public Keyword getOpHyphenMinusEqualsSignKeyword_1_1_0_2() { return cOpHyphenMinusEqualsSignKeyword_1_1_0_2; }
		
		//'*='
		public Keyword getOpAsteriskEqualsSignKeyword_1_1_0_3() { return cOpAsteriskEqualsSignKeyword_1_1_0_3; }
		
		//'/='
		public Keyword getOpSolidusEqualsSignKeyword_1_1_0_4() { return cOpSolidusEqualsSignKeyword_1_1_0_4; }
		
		//'%='
		public Keyword getOpPercentSignEqualsSignKeyword_1_1_0_5() { return cOpPercentSignEqualsSignKeyword_1_1_0_5; }
		
		//'&lt;&lt;='
		public Keyword getOpLtLtKeyword_1_1_0_6() { return cOpLtLtKeyword_1_1_0_6; }
		
		//'&gt;&gt;='
		public Keyword getOpGtGtKeyword_1_1_0_7() { return cOpGtGtKeyword_1_1_0_7; }
		
		//'&amp;='
		public Keyword getOpAmpKeyword_1_1_0_8() { return cOpAmpKeyword_1_1_0_8; }
		
		//'^='
		public Keyword getOpCircumflexAccentEqualsSignKeyword_1_1_0_9() { return cOpCircumflexAccentEqualsSignKeyword_1_1_0_9; }
		
		//'|='
		public Keyword getOpVerticalLineEqualsSignKeyword_1_1_0_10() { return cOpVerticalLineEqualsSignKeyword_1_1_0_10; }
		
		//right=Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_2_0() { return cRightExpressionParserRuleCall_1_2_0; }
	}
	public class TernaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.Ternary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTernaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExp1Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExp1ExpressionParserRuleCall_1_2_0 = (RuleCall)cExp1Assignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cExp2Assignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cExp2TernaryParserRuleCall_1_4_0 = (RuleCall)cExp2Assignment_1_4.eContents().get(0);
		
		//Ternary Expression:
		//	Or ({Ternary.left=current} "?" exp1=Expression ":" exp2=Ternary)?
		@Override public ParserRule getRule() { return rule; }
		
		//Or ({Ternary.left=current} "?" exp1=Expression ":" exp2=Ternary)?
		public Group getGroup() { return cGroup; }
		
		//Or
		public RuleCall getOrParserRuleCall_0() { return cOrParserRuleCall_0; }
		
		//({Ternary.left=current} "?" exp1=Expression ":" exp2=Ternary)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Ternary.left=current}
		public Action getTernaryLeftAction_1_0() { return cTernaryLeftAction_1_0; }
		
		//"?"
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }
		
		//exp1=Expression
		public Assignment getExp1Assignment_1_2() { return cExp1Assignment_1_2; }
		
		//Expression
		public RuleCall getExp1ExpressionParserRuleCall_1_2_0() { return cExp1ExpressionParserRuleCall_1_2_0; }
		
		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }
		
		//exp2=Ternary
		public Assignment getExp2Assignment_1_4() { return cExp2Assignment_1_4; }
		
		//Ternary
		public RuleCall getExp2TernaryParserRuleCall_1_4_0() { return cExp2TernaryParserRuleCall_1_4_0; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Expression:
		//	And ({Or.left=current} "||" right=And)*
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} "||" right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} "||" right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpAmpKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitOrParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Expression:
		//	BitOr ({And.left=current} "&amp;&amp;" right=BitOr)*
		@Override public ParserRule getRule() { return rule; }
		
		//BitOr ({And.left=current} "&amp;&amp;" right=BitOr)*
		public Group getGroup() { return cGroup; }
		
		//BitOr
		public RuleCall getBitOrParserRuleCall_0() { return cBitOrParserRuleCall_0; }
		
		//({And.left=current} "&amp;&amp;" right=BitOr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//"&amp;&amp;"
		public Keyword getAmpAmpKeyword_1_1() { return cAmpAmpKeyword_1_1; }
		
		//right=BitOr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitOr
		public RuleCall getRightBitOrParserRuleCall_1_2_0() { return cRightBitOrParserRuleCall_1_2_0; }
	}
	public class BitOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.BitOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitXorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitXorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BitOr Expression:
		//	BitXor ({BitOr.left=current} "|" right=BitXor)*
		@Override public ParserRule getRule() { return rule; }
		
		//BitXor ({BitOr.left=current} "|" right=BitXor)*
		public Group getGroup() { return cGroup; }
		
		//BitXor
		public RuleCall getBitXorParserRuleCall_0() { return cBitXorParserRuleCall_0; }
		
		//({BitOr.left=current} "|" right=BitXor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BitOr.left=current}
		public Action getBitOrLeftAction_1_0() { return cBitOrLeftAction_1_0; }
		
		//"|"
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }
		
		//right=BitXor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitXor
		public RuleCall getRightBitXorParserRuleCall_1_2_0() { return cRightBitXorParserRuleCall_1_2_0; }
	}
	public class BitXorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.BitXor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitXorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BitXor Expression:
		//	BitAnd ({BitXor.left=current} "^" right=BitAnd)*
		@Override public ParserRule getRule() { return rule; }
		
		//BitAnd ({BitXor.left=current} "^" right=BitAnd)*
		public Group getGroup() { return cGroup; }
		
		//BitAnd
		public RuleCall getBitAndParserRuleCall_0() { return cBitAndParserRuleCall_0; }
		
		//({BitXor.left=current} "^" right=BitAnd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BitXor.left=current}
		public Action getBitXorLeftAction_1_0() { return cBitXorLeftAction_1_0; }
		
		//"^"
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }
		
		//right=BitAnd
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitAnd
		public RuleCall getRightBitAndParserRuleCall_1_2_0() { return cRightBitAndParserRuleCall_1_2_0; }
	}
	public class BitAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.BitAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BitAnd Expression:
		//	Equality ({BitAnd.left=current} "&amp;" right=Equality)*
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({BitAnd.left=current} "&amp;" right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({BitAnd.left=current} "&amp;" right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BitAnd.left=current}
		public Action getBitAndLeftAction_1_0() { return cBitAndLeftAction_1_0; }
		
		//"&amp;"
		public Keyword getAmpKeyword_1_1() { return cAmpKeyword_1_1; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality Expression:
		//	Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} op=("==" | "!=") right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//op=("==" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//("==" | "!=")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cShiftParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGtKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLtKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGtKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLtKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightShiftParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison Expression:
		//	Shift ({Comparison.left=current} op=("&gt;=" | "&lt;=" | "&gt;" | "&lt;") right=Shift)*
		@Override public ParserRule getRule() { return rule; }
		
		//Shift ({Comparison.left=current} op=("&gt;=" | "&lt;=" | "&gt;" | "&lt;") right=Shift)*
		public Group getGroup() { return cGroup; }
		
		//Shift
		public RuleCall getShiftParserRuleCall_0() { return cShiftParserRuleCall_0; }
		
		//({Comparison.left=current} op=("&gt;=" | "&lt;=" | "&gt;" | "&lt;") right=Shift)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//op=("&gt;=" | "&lt;=" | "&gt;" | "&lt;")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//("&gt;=" | "&lt;=" | "&gt;" | "&lt;")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//"&gt;="
		public Keyword getOpGtKeyword_1_1_0_0() { return cOpGtKeyword_1_1_0_0; }
		
		//"&lt;="
		public Keyword getOpLtKeyword_1_1_0_1() { return cOpLtKeyword_1_1_0_1; }
		
		//"&gt;"
		public Keyword getOpGtKeyword_1_1_0_2() { return cOpGtKeyword_1_1_0_2; }
		
		//"&lt;"
		public Keyword getOpLtKeyword_1_1_0_3() { return cOpLtKeyword_1_1_0_3; }
		
		//right=Shift
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Shift
		public RuleCall getRightShiftParserRuleCall_1_2_0() { return cRightShiftParserRuleCall_1_2_0; }
	}
	public class ShiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.Shift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cShiftLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpLtLtKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpGtGtKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Shift Expression:
		//	PlusOrMinus ({Shift.left=current} op=("&lt;&lt;" | "&gt;&gt;") right=PlusOrMinus)*
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus ({Shift.left=current} op=("&lt;&lt;" | "&gt;&gt;") right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//({Shift.left=current} op=("&lt;&lt;" | "&gt;&gt;") right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Shift.left=current}
		public Action getShiftLeftAction_1_0() { return cShiftLeftAction_1_0; }
		
		//op=("&lt;&lt;" | "&gt;&gt;")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//("&lt;&lt;" | "&gt;&gt;")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//"&lt;&lt;"
		public Keyword getOpLtLtKeyword_1_1_0_0() { return cOpLtLtKeyword_1_1_0_0; }
		
		//"&gt;&gt;"
		public Keyword getOpGtGtKeyword_1_1_0_1() { return cOpGtGtKeyword_1_1_0_1; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus Expression:
		//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} '+' | {Minus.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMulLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cRemLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MulOrDiv Expression:
		//	Primary (({Mul.left=current} '*' | {Div.left=current} '/' | {Rem.left=current} '%') right=Primary)*
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (({Mul.left=current} '*' | {Div.left=current} '/' | {Rem.left=current} '%') right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(({Mul.left=current} '*' | {Div.left=current} '/' | {Rem.left=current} '%') right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Mul.left=current} '*' | {Div.left=current} '/' | {Rem.left=current} '%')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Mul.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Mul.left=current}
		public Action getMulLeftAction_1_0_0_0() { return cMulLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{Div.left=current} '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//{Rem.left=current} '%'
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//{Rem.left=current}
		public Action getRemLeftAction_1_0_2_0() { return cRemLeftAction_1_0_2_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_0_2_1() { return cPercentSignKeyword_1_0_2_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBitNotAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cTildeKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final RuleCall cFunctionCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAtomicParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Primary Expression:
		//	'(' Expression ')' | {Not} "!" expression=Primary | {BitNot} "~" expression=Primary | FunctionCall | Atomic
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | {Not} "!" expression=Primary | {BitNot} "~" expression=Primary | FunctionCall | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Not} "!" expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
		
		//{BitNot} "~" expression=Primary
		public Group getGroup_2() { return cGroup_2; }
		
		//{BitNot}
		public Action getBitNotAction_2_0() { return cBitNotAction_2_0; }
		
		//"~"
		public Keyword getTildeKeyword_2_1() { return cTildeKeyword_2_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_2_2_0() { return cExpressionPrimaryParserRuleCall_2_2_0; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_3() { return cFunctionCallParserRuleCall_3; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_4() { return cAtomicParserRuleCall_4; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Parameter:
		//	',' Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//',' Expression
		public Group getGroup() { return cGroup; }
		
		//','
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.FunctionCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSequenceCallAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cSequenceKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cQuotationMarkKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cSeqnameAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cSeqnameIDTerminalRuleCall_0_4_0 = (RuleCall)cSeqnameAssignment_0_4.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cQueryAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cQueryKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTypeExpressionParserRuleCall_1_3_0 = (RuleCall)cTypeAssignment_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cMessageAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cMessageSTRINGTerminalRuleCall_1_5_0 = (RuleCall)cMessageAssignment_1_5.eContents().get(0);
		private final Keyword cCommaKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cDefaultAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cDefaultExpressionParserRuleCall_1_7_0 = (RuleCall)cDefaultAssignment_1_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cQueryValueAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cQueryValueKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cMessageAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cMessageSTRINGTerminalRuleCall_2_3_0 = (RuleCall)cMessageAssignment_2_3.eContents().get(0);
		private final Keyword cCommaKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cDefaultAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cDefaultExpressionParserRuleCall_2_5_0 = (RuleCall)cDefaultAssignment_2_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cMessageAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cMessageKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cTypeAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cTypeExpressionParserRuleCall_3_3_0 = (RuleCall)cTypeAssignment_3_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cFormatAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cFormatSTRINGTerminalRuleCall_3_5_0 = (RuleCall)cFormatAssignment_3_5.eContents().get(0);
		private final Assignment cParametersAssignment_3_6 = (Assignment)cGroup_3.eContents().get(6);
		private final RuleCall cParametersParameterParserRuleCall_3_6_0 = (RuleCall)cParametersAssignment_3_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_7 = (Keyword)cGroup_3.eContents().get(7);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cLoadDebugInfoAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cLoadDebugInfoKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cPathAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cPathSTRINGTerminalRuleCall_4_3_0 = (RuleCall)cPathAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cRead8Action_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cRead8Keyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cAddrAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cAddrExpressionParserRuleCall_5_3_0 = (RuleCall)cAddrAssignment_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cRead16Action_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cRead16Keyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cAddrAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cAddrExpressionParserRuleCall_6_3_0 = (RuleCall)cAddrAssignment_6_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cRead32Action_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cRead32Keyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cAddrAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cAddrExpressionParserRuleCall_7_3_0 = (RuleCall)cAddrAssignment_7_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cRead64Action_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cRead64Keyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cAddrAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cAddrExpressionParserRuleCall_8_3_0 = (RuleCall)cAddrAssignment_8_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cReadAPAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cReadAPKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Assignment cAddrAssignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final RuleCall cAddrExpressionParserRuleCall_9_3_0 = (RuleCall)cAddrAssignment_9_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cReadDPAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Keyword cReadDPKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Assignment cAddrAssignment_10_3 = (Assignment)cGroup_10.eContents().get(3);
		private final RuleCall cAddrExpressionParserRuleCall_10_3_0 = (RuleCall)cAddrAssignment_10_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cWrite8Action_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Keyword cWrite8Keyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Assignment cAddrAssignment_11_3 = (Assignment)cGroup_11.eContents().get(3);
		private final RuleCall cAddrExpressionParserRuleCall_11_3_0 = (RuleCall)cAddrAssignment_11_3.eContents().get(0);
		private final Keyword cCommaKeyword_11_4 = (Keyword)cGroup_11.eContents().get(4);
		private final Assignment cValAssignment_11_5 = (Assignment)cGroup_11.eContents().get(5);
		private final RuleCall cValExpressionParserRuleCall_11_5_0 = (RuleCall)cValAssignment_11_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11_6 = (Keyword)cGroup_11.eContents().get(6);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cWrite16Action_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Keyword cWrite16Keyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_12_2 = (Keyword)cGroup_12.eContents().get(2);
		private final Assignment cAddrAssignment_12_3 = (Assignment)cGroup_12.eContents().get(3);
		private final RuleCall cAddrExpressionParserRuleCall_12_3_0 = (RuleCall)cAddrAssignment_12_3.eContents().get(0);
		private final Keyword cCommaKeyword_12_4 = (Keyword)cGroup_12.eContents().get(4);
		private final Assignment cValAssignment_12_5 = (Assignment)cGroup_12.eContents().get(5);
		private final RuleCall cValExpressionParserRuleCall_12_5_0 = (RuleCall)cValAssignment_12_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12_6 = (Keyword)cGroup_12.eContents().get(6);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cWrite32Action_13_0 = (Action)cGroup_13.eContents().get(0);
		private final Keyword cWrite32Keyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Assignment cAddrAssignment_13_3 = (Assignment)cGroup_13.eContents().get(3);
		private final RuleCall cAddrExpressionParserRuleCall_13_3_0 = (RuleCall)cAddrAssignment_13_3.eContents().get(0);
		private final Keyword cCommaKeyword_13_4 = (Keyword)cGroup_13.eContents().get(4);
		private final Assignment cValAssignment_13_5 = (Assignment)cGroup_13.eContents().get(5);
		private final RuleCall cValExpressionParserRuleCall_13_5_0 = (RuleCall)cValAssignment_13_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13_6 = (Keyword)cGroup_13.eContents().get(6);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Action cWrite64Action_14_0 = (Action)cGroup_14.eContents().get(0);
		private final Keyword cWrite64Keyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_14_2 = (Keyword)cGroup_14.eContents().get(2);
		private final Assignment cAddrAssignment_14_3 = (Assignment)cGroup_14.eContents().get(3);
		private final RuleCall cAddrExpressionParserRuleCall_14_3_0 = (RuleCall)cAddrAssignment_14_3.eContents().get(0);
		private final Keyword cCommaKeyword_14_4 = (Keyword)cGroup_14.eContents().get(4);
		private final Assignment cValAssignment_14_5 = (Assignment)cGroup_14.eContents().get(5);
		private final RuleCall cValExpressionParserRuleCall_14_5_0 = (RuleCall)cValAssignment_14_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_14_6 = (Keyword)cGroup_14.eContents().get(6);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Action cWriteAPAction_15_0 = (Action)cGroup_15.eContents().get(0);
		private final Keyword cWriteAPKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_15_2 = (Keyword)cGroup_15.eContents().get(2);
		private final Assignment cAddrAssignment_15_3 = (Assignment)cGroup_15.eContents().get(3);
		private final RuleCall cAddrExpressionParserRuleCall_15_3_0 = (RuleCall)cAddrAssignment_15_3.eContents().get(0);
		private final Keyword cCommaKeyword_15_4 = (Keyword)cGroup_15.eContents().get(4);
		private final Assignment cValAssignment_15_5 = (Assignment)cGroup_15.eContents().get(5);
		private final RuleCall cValExpressionParserRuleCall_15_5_0 = (RuleCall)cValAssignment_15_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_15_6 = (Keyword)cGroup_15.eContents().get(6);
		private final Group cGroup_16 = (Group)cAlternatives.eContents().get(16);
		private final Action cWriteDPAction_16_0 = (Action)cGroup_16.eContents().get(0);
		private final Keyword cWriteDPKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_16_2 = (Keyword)cGroup_16.eContents().get(2);
		private final Assignment cAddrAssignment_16_3 = (Assignment)cGroup_16.eContents().get(3);
		private final RuleCall cAddrExpressionParserRuleCall_16_3_0 = (RuleCall)cAddrAssignment_16_3.eContents().get(0);
		private final Keyword cCommaKeyword_16_4 = (Keyword)cGroup_16.eContents().get(4);
		private final Assignment cValAssignment_16_5 = (Assignment)cGroup_16.eContents().get(5);
		private final RuleCall cValExpressionParserRuleCall_16_5_0 = (RuleCall)cValAssignment_16_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_16_6 = (Keyword)cGroup_16.eContents().get(6);
		private final Group cGroup_17 = (Group)cAlternatives.eContents().get(17);
		private final Action cDapDelayAction_17_0 = (Action)cGroup_17.eContents().get(0);
		private final Keyword cDAP_DelayKeyword_17_1 = (Keyword)cGroup_17.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_17_2 = (Keyword)cGroup_17.eContents().get(2);
		private final Assignment cDelayAssignment_17_3 = (Assignment)cGroup_17.eContents().get(3);
		private final RuleCall cDelayExpressionParserRuleCall_17_3_0 = (RuleCall)cDelayAssignment_17_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_17_4 = (Keyword)cGroup_17.eContents().get(4);
		private final Group cGroup_18 = (Group)cAlternatives.eContents().get(18);
		private final Action cDapWriteABORTAction_18_0 = (Action)cGroup_18.eContents().get(0);
		private final Keyword cDAP_WriteABORTKeyword_18_1 = (Keyword)cGroup_18.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_18_2 = (Keyword)cGroup_18.eContents().get(2);
		private final Assignment cValueAssignment_18_3 = (Assignment)cGroup_18.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_18_3_0 = (RuleCall)cValueAssignment_18_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_18_4 = (Keyword)cGroup_18.eContents().get(4);
		private final Group cGroup_19 = (Group)cAlternatives.eContents().get(19);
		private final Action cDapSwjPinsAction_19_0 = (Action)cGroup_19.eContents().get(0);
		private final Keyword cDAP_SWJ_PinsKeyword_19_1 = (Keyword)cGroup_19.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_19_2 = (Keyword)cGroup_19.eContents().get(2);
		private final Assignment cPinoutAssignment_19_3 = (Assignment)cGroup_19.eContents().get(3);
		private final RuleCall cPinoutExpressionParserRuleCall_19_3_0 = (RuleCall)cPinoutAssignment_19_3.eContents().get(0);
		private final Keyword cCommaKeyword_19_4 = (Keyword)cGroup_19.eContents().get(4);
		private final Assignment cPinselectAssignment_19_5 = (Assignment)cGroup_19.eContents().get(5);
		private final RuleCall cPinselectExpressionParserRuleCall_19_5_0 = (RuleCall)cPinselectAssignment_19_5.eContents().get(0);
		private final Keyword cCommaKeyword_19_6 = (Keyword)cGroup_19.eContents().get(6);
		private final Assignment cPinwaitAssignment_19_7 = (Assignment)cGroup_19.eContents().get(7);
		private final RuleCall cPinwaitExpressionParserRuleCall_19_7_0 = (RuleCall)cPinwaitAssignment_19_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_19_8 = (Keyword)cGroup_19.eContents().get(8);
		private final Group cGroup_20 = (Group)cAlternatives.eContents().get(20);
		private final Action cDapSwjClockAction_20_0 = (Action)cGroup_20.eContents().get(0);
		private final Keyword cDAP_SWJ_ClockKeyword_20_1 = (Keyword)cGroup_20.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_20_2 = (Keyword)cGroup_20.eContents().get(2);
		private final Assignment cValueAssignment_20_3 = (Assignment)cGroup_20.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_20_3_0 = (RuleCall)cValueAssignment_20_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_20_4 = (Keyword)cGroup_20.eContents().get(4);
		private final Group cGroup_21 = (Group)cAlternatives.eContents().get(21);
		private final Action cDapSwjSequenceAction_21_0 = (Action)cGroup_21.eContents().get(0);
		private final Keyword cDAP_SWJ_SequenceKeyword_21_1 = (Keyword)cGroup_21.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_21_2 = (Keyword)cGroup_21.eContents().get(2);
		private final Assignment cCntAssignment_21_3 = (Assignment)cGroup_21.eContents().get(3);
		private final RuleCall cCntExpressionParserRuleCall_21_3_0 = (RuleCall)cCntAssignment_21_3.eContents().get(0);
		private final Keyword cCommaKeyword_21_4 = (Keyword)cGroup_21.eContents().get(4);
		private final Assignment cValAssignment_21_5 = (Assignment)cGroup_21.eContents().get(5);
		private final RuleCall cValExpressionParserRuleCall_21_5_0 = (RuleCall)cValAssignment_21_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_21_6 = (Keyword)cGroup_21.eContents().get(6);
		private final Group cGroup_22 = (Group)cAlternatives.eContents().get(22);
		private final Action cDapJtagSequenceAction_22_0 = (Action)cGroup_22.eContents().get(0);
		private final Keyword cDAP_JTAG_SequenceKeyword_22_1 = (Keyword)cGroup_22.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_22_2 = (Keyword)cGroup_22.eContents().get(2);
		private final Assignment cCntAssignment_22_3 = (Assignment)cGroup_22.eContents().get(3);
		private final RuleCall cCntExpressionParserRuleCall_22_3_0 = (RuleCall)cCntAssignment_22_3.eContents().get(0);
		private final Keyword cCommaKeyword_22_4 = (Keyword)cGroup_22.eContents().get(4);
		private final Assignment cTmsAssignment_22_5 = (Assignment)cGroup_22.eContents().get(5);
		private final RuleCall cTmsExpressionParserRuleCall_22_5_0 = (RuleCall)cTmsAssignment_22_5.eContents().get(0);
		private final Keyword cCommaKeyword_22_6 = (Keyword)cGroup_22.eContents().get(6);
		private final Assignment cTdiAssignment_22_7 = (Assignment)cGroup_22.eContents().get(7);
		private final RuleCall cTdiExpressionParserRuleCall_22_7_0 = (RuleCall)cTdiAssignment_22_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_22_8 = (Keyword)cGroup_22.eContents().get(8);
		
		//FunctionCall Expression:
		//	{SequenceCall} 'Sequence' '(' '"' seqname=ID '"' ')' | {Query} 'Query' '(' type=Expression ',' message=STRING ','
		//	default=Expression ')' | {QueryValue} 'QueryValue' '(' message=STRING ',' default=Expression ')' | {Message}
		//	'Message' '(' type=Expression ',' format=STRING parameters+=Parameter* ')' | {LoadDebugInfo} 'LoadDebugInfo' '('
		//	path=STRING ')' | {Read8} 'Read8' '(' addr=Expression ')' | {Read16} 'Read16' '(' addr=Expression ')' | {Read32}
		//	'Read32' '(' addr=Expression ')' | {Read64} 'Read64' '(' addr=Expression ')' | {ReadAP} 'ReadAP' '(' addr=Expression
		//	')' | {ReadDP} 'ReadDP' '(' addr=Expression ')' | {Write8} 'Write8' '(' addr=Expression ',' val=Expression ')' |
		//	{Write16} 'Write16' '(' addr=Expression ',' val=Expression ')' | {Write32} 'Write32' '(' addr=Expression ','
		//	val=Expression ')' | {Write64} 'Write64' '(' addr=Expression ',' val=Expression ')' | {WriteAP} 'WriteAP' '('
		//	addr=Expression ',' val=Expression ')' | {WriteDP} 'WriteDP' '(' addr=Expression ',' val=Expression ')' | {DapDelay}
		//	'DAP_Delay' '(' delay=Expression ')' | {DapWriteABORT} 'DAP_WriteABORT' '(' value=Expression ')' | {DapSwjPins}
		//	'DAP_SWJ_Pins' '(' pinout=Expression ',' pinselect=Expression ',' pinwait=Expression ')' | {DapSwjClock}
		//	'DAP_SWJ_Clock' '(' value=Expression ')' | {DapSwjSequence} 'DAP_SWJ_Sequence' '(' cnt=Expression ',' val=Expression
		//	')' | {DapJtagSequence} 'DAP_JTAG_Sequence' '(' cnt=Expression ',' tms=Expression ',' tdi=Expression ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{SequenceCall} 'Sequence' '(' '"' seqname=ID '"' ')' | {Query} 'Query' '(' type=Expression ',' message=STRING ','
		//default=Expression ')' | {QueryValue} 'QueryValue' '(' message=STRING ',' default=Expression ')' | {Message} 'Message'
		//'(' type=Expression ',' format=STRING parameters+=Parameter* ')' | {LoadDebugInfo} 'LoadDebugInfo' '(' path=STRING ')'
		//| {Read8} 'Read8' '(' addr=Expression ')' | {Read16} 'Read16' '(' addr=Expression ')' | {Read32} 'Read32' '('
		//addr=Expression ')' | {Read64} 'Read64' '(' addr=Expression ')' | {ReadAP} 'ReadAP' '(' addr=Expression ')' | {ReadDP}
		//'ReadDP' '(' addr=Expression ')' | {Write8} 'Write8' '(' addr=Expression ',' val=Expression ')' | {Write16} 'Write16'
		//'(' addr=Expression ',' val=Expression ')' | {Write32} 'Write32' '(' addr=Expression ',' val=Expression ')' |
		//{Write64} 'Write64' '(' addr=Expression ',' val=Expression ')' | {WriteAP} 'WriteAP' '(' addr=Expression ','
		//val=Expression ')' | {WriteDP} 'WriteDP' '(' addr=Expression ',' val=Expression ')' | {DapDelay} 'DAP_Delay' '('
		//delay=Expression ')' | {DapWriteABORT} 'DAP_WriteABORT' '(' value=Expression ')' | {DapSwjPins} 'DAP_SWJ_Pins' '('
		//pinout=Expression ',' pinselect=Expression ',' pinwait=Expression ')' | {DapSwjClock} 'DAP_SWJ_Clock' '('
		//value=Expression ')' | {DapSwjSequence} 'DAP_SWJ_Sequence' '(' cnt=Expression ',' val=Expression ')' |
		//{DapJtagSequence} 'DAP_JTAG_Sequence' '(' cnt=Expression ',' tms=Expression ',' tdi=Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SequenceCall} 'Sequence' '(' '"' seqname=ID '"' ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{SequenceCall}
		public Action getSequenceCallAction_0_0() { return cSequenceCallAction_0_0; }
		
		//'Sequence'
		public Keyword getSequenceKeyword_0_1() { return cSequenceKeyword_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_0_3() { return cQuotationMarkKeyword_0_3; }
		
		//seqname=ID
		public Assignment getSeqnameAssignment_0_4() { return cSeqnameAssignment_0_4; }
		
		//ID
		public RuleCall getSeqnameIDTerminalRuleCall_0_4_0() { return cSeqnameIDTerminalRuleCall_0_4_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_0_5() { return cQuotationMarkKeyword_0_5; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_6() { return cRightParenthesisKeyword_0_6; }
		
		//{Query} 'Query' '(' type=Expression ',' message=STRING ',' default=Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Query}
		public Action getQueryAction_1_0() { return cQueryAction_1_0; }
		
		//'Query'
		public Keyword getQueryKeyword_1_1() { return cQueryKeyword_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//type=Expression
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }
		
		//Expression
		public RuleCall getTypeExpressionParserRuleCall_1_3_0() { return cTypeExpressionParserRuleCall_1_3_0; }
		
		//','
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }
		
		//message=STRING
		public Assignment getMessageAssignment_1_5() { return cMessageAssignment_1_5; }
		
		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_1_5_0() { return cMessageSTRINGTerminalRuleCall_1_5_0; }
		
		//','
		public Keyword getCommaKeyword_1_6() { return cCommaKeyword_1_6; }
		
		//default=Expression
		public Assignment getDefaultAssignment_1_7() { return cDefaultAssignment_1_7; }
		
		//Expression
		public RuleCall getDefaultExpressionParserRuleCall_1_7_0() { return cDefaultExpressionParserRuleCall_1_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_8() { return cRightParenthesisKeyword_1_8; }
		
		//{QueryValue} 'QueryValue' '(' message=STRING ',' default=Expression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{QueryValue}
		public Action getQueryValueAction_2_0() { return cQueryValueAction_2_0; }
		
		//'QueryValue'
		public Keyword getQueryValueKeyword_2_1() { return cQueryValueKeyword_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//message=STRING
		public Assignment getMessageAssignment_2_3() { return cMessageAssignment_2_3; }
		
		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_2_3_0() { return cMessageSTRINGTerminalRuleCall_2_3_0; }
		
		//','
		public Keyword getCommaKeyword_2_4() { return cCommaKeyword_2_4; }
		
		//default=Expression
		public Assignment getDefaultAssignment_2_5() { return cDefaultAssignment_2_5; }
		
		//Expression
		public RuleCall getDefaultExpressionParserRuleCall_2_5_0() { return cDefaultExpressionParserRuleCall_2_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_6() { return cRightParenthesisKeyword_2_6; }
		
		//{Message} 'Message' '(' type=Expression ',' format=STRING parameters+=Parameter* ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//{Message}
		public Action getMessageAction_3_0() { return cMessageAction_3_0; }
		
		//'Message'
		public Keyword getMessageKeyword_3_1() { return cMessageKeyword_3_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//type=Expression
		public Assignment getTypeAssignment_3_3() { return cTypeAssignment_3_3; }
		
		//Expression
		public RuleCall getTypeExpressionParserRuleCall_3_3_0() { return cTypeExpressionParserRuleCall_3_3_0; }
		
		//','
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }
		
		//format=STRING
		public Assignment getFormatAssignment_3_5() { return cFormatAssignment_3_5; }
		
		//STRING
		public RuleCall getFormatSTRINGTerminalRuleCall_3_5_0() { return cFormatSTRINGTerminalRuleCall_3_5_0; }
		
		//parameters+=Parameter*
		public Assignment getParametersAssignment_3_6() { return cParametersAssignment_3_6; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_6_0() { return cParametersParameterParserRuleCall_3_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_7() { return cRightParenthesisKeyword_3_7; }
		
		//{LoadDebugInfo} 'LoadDebugInfo' '(' path=STRING ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//{LoadDebugInfo}
		public Action getLoadDebugInfoAction_4_0() { return cLoadDebugInfoAction_4_0; }
		
		//'LoadDebugInfo'
		public Keyword getLoadDebugInfoKeyword_4_1() { return cLoadDebugInfoKeyword_4_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//path=STRING
		public Assignment getPathAssignment_4_3() { return cPathAssignment_4_3; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_4_3_0() { return cPathSTRINGTerminalRuleCall_4_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//{Read8} 'Read8' '(' addr=Expression ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//{Read8}
		public Action getRead8Action_5_0() { return cRead8Action_5_0; }
		
		//'Read8'
		public Keyword getRead8Keyword_5_1() { return cRead8Keyword_5_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }
		
		//addr=Expression
		public Assignment getAddrAssignment_5_3() { return cAddrAssignment_5_3; }
		
		//Expression
		public RuleCall getAddrExpressionParserRuleCall_5_3_0() { return cAddrExpressionParserRuleCall_5_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//{Read16} 'Read16' '(' addr=Expression ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//{Read16}
		public Action getRead16Action_6_0() { return cRead16Action_6_0; }
		
		//'Read16'
		public Keyword getRead16Keyword_6_1() { return cRead16Keyword_6_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }
		
		//addr=Expression
		public Assignment getAddrAssignment_6_3() { return cAddrAssignment_6_3; }
		
		//Expression
		public RuleCall getAddrExpressionParserRuleCall_6_3_0() { return cAddrExpressionParserRuleCall_6_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_4() { return cRightParenthesisKeyword_6_4; }
		
		//{Read32} 'Read32' '(' addr=Expression ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//{Read32}
		public Action getRead32Action_7_0() { return cRead32Action_7_0; }
		
		//'Read32'
		public Keyword getRead32Keyword_7_1() { return cRead32Keyword_7_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_2() { return cLeftParenthesisKeyword_7_2; }
		
		//addr=Expression
		public Assignment getAddrAssignment_7_3() { return cAddrAssignment_7_3; }
		
		//Expression
		public RuleCall getAddrExpressionParserRuleCall_7_3_0() { return cAddrExpressionParserRuleCall_7_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }
		
		//{Read64} 'Read64' '(' addr=Expression ')'
		public Group getGroup_8() { return cGroup_8; }
		
		//{Read64}
		public Action getRead64Action_8_0() { return cRead64Action_8_0; }
		
		//'Read64'
		public Keyword getRead64Keyword_8_1() { return cRead64Keyword_8_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_2() { return cLeftParenthesisKeyword_8_2; }
		
		//addr=Expression
		public Assignment getAddrAssignment_8_3() { return cAddrAssignment_8_3; }
		
		//Expression
		public RuleCall getAddrExpressionParserRuleCall_8_3_0() { return cAddrExpressionParserRuleCall_8_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_4() { return cRightParenthesisKeyword_8_4; }
		
		//{ReadAP} 'ReadAP' '(' addr=Expression ')'
		public Group getGroup_9() { return cGroup_9; }
		
		//{ReadAP}
		public Action getReadAPAction_9_0() { return cReadAPAction_9_0; }
		
		//'ReadAP'
		public Keyword getReadAPKeyword_9_1() { return cReadAPKeyword_9_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9_2() { return cLeftParenthesisKeyword_9_2; }
		
		//addr=Expression
		public Assignment getAddrAssignment_9_3() { return cAddrAssignment_9_3; }
		
		//Expression
		public RuleCall getAddrExpressionParserRuleCall_9_3_0() { return cAddrExpressionParserRuleCall_9_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9_4() { return cRightParenthesisKeyword_9_4; }
		
		//{ReadDP} 'ReadDP' '(' addr=Expression ')'
		public Group getGroup_10() { return cGroup_10; }
		
		//{ReadDP}
		public Action getReadDPAction_10_0() { return cReadDPAction_10_0; }
		
		//'ReadDP'
		public Keyword getReadDPKeyword_10_1() { return cReadDPKeyword_10_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_10_2() { return cLeftParenthesisKeyword_10_2; }
		
		//addr=Expression
		public Assignment getAddrAssignment_10_3() { return cAddrAssignment_10_3; }
		
		//Expression
		public RuleCall getAddrExpressionParserRuleCall_10_3_0() { return cAddrExpressionParserRuleCall_10_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10_4() { return cRightParenthesisKeyword_10_4; }
		
		//{Write8} 'Write8' '(' addr=Expression ',' val=Expression ')'
		public Group getGroup_11() { return cGroup_11; }
		
		//{Write8}
		public Action getWrite8Action_11_0() { return cWrite8Action_11_0; }
		
		//'Write8'
		public Keyword getWrite8Keyword_11_1() { return cWrite8Keyword_11_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_11_2() { return cLeftParenthesisKeyword_11_2; }
		
		//addr=Expression
		public Assignment getAddrAssignment_11_3() { return cAddrAssignment_11_3; }
		
		//Expression
		public RuleCall getAddrExpressionParserRuleCall_11_3_0() { return cAddrExpressionParserRuleCall_11_3_0; }
		
		//','
		public Keyword getCommaKeyword_11_4() { return cCommaKeyword_11_4; }
		
		//val=Expression
		public Assignment getValAssignment_11_5() { return cValAssignment_11_5; }
		
		//Expression
		public RuleCall getValExpressionParserRuleCall_11_5_0() { return cValExpressionParserRuleCall_11_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11_6() { return cRightParenthesisKeyword_11_6; }
		
		//{Write16} 'Write16' '(' addr=Expression ',' val=Expression ')'
		public Group getGroup_12() { return cGroup_12; }
		
		//{Write16}
		public Action getWrite16Action_12_0() { return cWrite16Action_12_0; }
		
		//'Write16'
		public Keyword getWrite16Keyword_12_1() { return cWrite16Keyword_12_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_12_2() { return cLeftParenthesisKeyword_12_2; }
		
		//addr=Expression
		public Assignment getAddrAssignment_12_3() { return cAddrAssignment_12_3; }
		
		//Expression
		public RuleCall getAddrExpressionParserRuleCall_12_3_0() { return cAddrExpressionParserRuleCall_12_3_0; }
		
		//','
		public Keyword getCommaKeyword_12_4() { return cCommaKeyword_12_4; }
		
		//val=Expression
		public Assignment getValAssignment_12_5() { return cValAssignment_12_5; }
		
		//Expression
		public RuleCall getValExpressionParserRuleCall_12_5_0() { return cValExpressionParserRuleCall_12_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12_6() { return cRightParenthesisKeyword_12_6; }
		
		//{Write32} 'Write32' '(' addr=Expression ',' val=Expression ')'
		public Group getGroup_13() { return cGroup_13; }
		
		//{Write32}
		public Action getWrite32Action_13_0() { return cWrite32Action_13_0; }
		
		//'Write32'
		public Keyword getWrite32Keyword_13_1() { return cWrite32Keyword_13_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_13_2() { return cLeftParenthesisKeyword_13_2; }
		
		//addr=Expression
		public Assignment getAddrAssignment_13_3() { return cAddrAssignment_13_3; }
		
		//Expression
		public RuleCall getAddrExpressionParserRuleCall_13_3_0() { return cAddrExpressionParserRuleCall_13_3_0; }
		
		//','
		public Keyword getCommaKeyword_13_4() { return cCommaKeyword_13_4; }
		
		//val=Expression
		public Assignment getValAssignment_13_5() { return cValAssignment_13_5; }
		
		//Expression
		public RuleCall getValExpressionParserRuleCall_13_5_0() { return cValExpressionParserRuleCall_13_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_13_6() { return cRightParenthesisKeyword_13_6; }
		
		//{Write64} 'Write64' '(' addr=Expression ',' val=Expression ')'
		public Group getGroup_14() { return cGroup_14; }
		
		//{Write64}
		public Action getWrite64Action_14_0() { return cWrite64Action_14_0; }
		
		//'Write64'
		public Keyword getWrite64Keyword_14_1() { return cWrite64Keyword_14_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_14_2() { return cLeftParenthesisKeyword_14_2; }
		
		//addr=Expression
		public Assignment getAddrAssignment_14_3() { return cAddrAssignment_14_3; }
		
		//Expression
		public RuleCall getAddrExpressionParserRuleCall_14_3_0() { return cAddrExpressionParserRuleCall_14_3_0; }
		
		//','
		public Keyword getCommaKeyword_14_4() { return cCommaKeyword_14_4; }
		
		//val=Expression
		public Assignment getValAssignment_14_5() { return cValAssignment_14_5; }
		
		//Expression
		public RuleCall getValExpressionParserRuleCall_14_5_0() { return cValExpressionParserRuleCall_14_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_14_6() { return cRightParenthesisKeyword_14_6; }
		
		//{WriteAP} 'WriteAP' '(' addr=Expression ',' val=Expression ')'
		public Group getGroup_15() { return cGroup_15; }
		
		//{WriteAP}
		public Action getWriteAPAction_15_0() { return cWriteAPAction_15_0; }
		
		//'WriteAP'
		public Keyword getWriteAPKeyword_15_1() { return cWriteAPKeyword_15_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_15_2() { return cLeftParenthesisKeyword_15_2; }
		
		//addr=Expression
		public Assignment getAddrAssignment_15_3() { return cAddrAssignment_15_3; }
		
		//Expression
		public RuleCall getAddrExpressionParserRuleCall_15_3_0() { return cAddrExpressionParserRuleCall_15_3_0; }
		
		//','
		public Keyword getCommaKeyword_15_4() { return cCommaKeyword_15_4; }
		
		//val=Expression
		public Assignment getValAssignment_15_5() { return cValAssignment_15_5; }
		
		//Expression
		public RuleCall getValExpressionParserRuleCall_15_5_0() { return cValExpressionParserRuleCall_15_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_15_6() { return cRightParenthesisKeyword_15_6; }
		
		//{WriteDP} 'WriteDP' '(' addr=Expression ',' val=Expression ')'
		public Group getGroup_16() { return cGroup_16; }
		
		//{WriteDP}
		public Action getWriteDPAction_16_0() { return cWriteDPAction_16_0; }
		
		//'WriteDP'
		public Keyword getWriteDPKeyword_16_1() { return cWriteDPKeyword_16_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_16_2() { return cLeftParenthesisKeyword_16_2; }
		
		//addr=Expression
		public Assignment getAddrAssignment_16_3() { return cAddrAssignment_16_3; }
		
		//Expression
		public RuleCall getAddrExpressionParserRuleCall_16_3_0() { return cAddrExpressionParserRuleCall_16_3_0; }
		
		//','
		public Keyword getCommaKeyword_16_4() { return cCommaKeyword_16_4; }
		
		//val=Expression
		public Assignment getValAssignment_16_5() { return cValAssignment_16_5; }
		
		//Expression
		public RuleCall getValExpressionParserRuleCall_16_5_0() { return cValExpressionParserRuleCall_16_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_16_6() { return cRightParenthesisKeyword_16_6; }
		
		//{DapDelay} 'DAP_Delay' '(' delay=Expression ')'
		public Group getGroup_17() { return cGroup_17; }
		
		//{DapDelay}
		public Action getDapDelayAction_17_0() { return cDapDelayAction_17_0; }
		
		//'DAP_Delay'
		public Keyword getDAP_DelayKeyword_17_1() { return cDAP_DelayKeyword_17_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_17_2() { return cLeftParenthesisKeyword_17_2; }
		
		//delay=Expression
		public Assignment getDelayAssignment_17_3() { return cDelayAssignment_17_3; }
		
		//Expression
		public RuleCall getDelayExpressionParserRuleCall_17_3_0() { return cDelayExpressionParserRuleCall_17_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_17_4() { return cRightParenthesisKeyword_17_4; }
		
		//{DapWriteABORT} 'DAP_WriteABORT' '(' value=Expression ')'
		public Group getGroup_18() { return cGroup_18; }
		
		//{DapWriteABORT}
		public Action getDapWriteABORTAction_18_0() { return cDapWriteABORTAction_18_0; }
		
		//'DAP_WriteABORT'
		public Keyword getDAP_WriteABORTKeyword_18_1() { return cDAP_WriteABORTKeyword_18_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_18_2() { return cLeftParenthesisKeyword_18_2; }
		
		//value=Expression
		public Assignment getValueAssignment_18_3() { return cValueAssignment_18_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_18_3_0() { return cValueExpressionParserRuleCall_18_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_18_4() { return cRightParenthesisKeyword_18_4; }
		
		//{DapSwjPins} 'DAP_SWJ_Pins' '(' pinout=Expression ',' pinselect=Expression ',' pinwait=Expression ')'
		public Group getGroup_19() { return cGroup_19; }
		
		//{DapSwjPins}
		public Action getDapSwjPinsAction_19_0() { return cDapSwjPinsAction_19_0; }
		
		//'DAP_SWJ_Pins'
		public Keyword getDAP_SWJ_PinsKeyword_19_1() { return cDAP_SWJ_PinsKeyword_19_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_19_2() { return cLeftParenthesisKeyword_19_2; }
		
		//pinout=Expression
		public Assignment getPinoutAssignment_19_3() { return cPinoutAssignment_19_3; }
		
		//Expression
		public RuleCall getPinoutExpressionParserRuleCall_19_3_0() { return cPinoutExpressionParserRuleCall_19_3_0; }
		
		//','
		public Keyword getCommaKeyword_19_4() { return cCommaKeyword_19_4; }
		
		//pinselect=Expression
		public Assignment getPinselectAssignment_19_5() { return cPinselectAssignment_19_5; }
		
		//Expression
		public RuleCall getPinselectExpressionParserRuleCall_19_5_0() { return cPinselectExpressionParserRuleCall_19_5_0; }
		
		//','
		public Keyword getCommaKeyword_19_6() { return cCommaKeyword_19_6; }
		
		//pinwait=Expression
		public Assignment getPinwaitAssignment_19_7() { return cPinwaitAssignment_19_7; }
		
		//Expression
		public RuleCall getPinwaitExpressionParserRuleCall_19_7_0() { return cPinwaitExpressionParserRuleCall_19_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_19_8() { return cRightParenthesisKeyword_19_8; }
		
		//{DapSwjClock} 'DAP_SWJ_Clock' '(' value=Expression ')'
		public Group getGroup_20() { return cGroup_20; }
		
		//{DapSwjClock}
		public Action getDapSwjClockAction_20_0() { return cDapSwjClockAction_20_0; }
		
		//'DAP_SWJ_Clock'
		public Keyword getDAP_SWJ_ClockKeyword_20_1() { return cDAP_SWJ_ClockKeyword_20_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_20_2() { return cLeftParenthesisKeyword_20_2; }
		
		//value=Expression
		public Assignment getValueAssignment_20_3() { return cValueAssignment_20_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_20_3_0() { return cValueExpressionParserRuleCall_20_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_20_4() { return cRightParenthesisKeyword_20_4; }
		
		//{DapSwjSequence} 'DAP_SWJ_Sequence' '(' cnt=Expression ',' val=Expression ')'
		public Group getGroup_21() { return cGroup_21; }
		
		//{DapSwjSequence}
		public Action getDapSwjSequenceAction_21_0() { return cDapSwjSequenceAction_21_0; }
		
		//'DAP_SWJ_Sequence'
		public Keyword getDAP_SWJ_SequenceKeyword_21_1() { return cDAP_SWJ_SequenceKeyword_21_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_21_2() { return cLeftParenthesisKeyword_21_2; }
		
		//cnt=Expression
		public Assignment getCntAssignment_21_3() { return cCntAssignment_21_3; }
		
		//Expression
		public RuleCall getCntExpressionParserRuleCall_21_3_0() { return cCntExpressionParserRuleCall_21_3_0; }
		
		//','
		public Keyword getCommaKeyword_21_4() { return cCommaKeyword_21_4; }
		
		//val=Expression
		public Assignment getValAssignment_21_5() { return cValAssignment_21_5; }
		
		//Expression
		public RuleCall getValExpressionParserRuleCall_21_5_0() { return cValExpressionParserRuleCall_21_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_21_6() { return cRightParenthesisKeyword_21_6; }
		
		//{DapJtagSequence} 'DAP_JTAG_Sequence' '(' cnt=Expression ',' tms=Expression ',' tdi=Expression ')'
		public Group getGroup_22() { return cGroup_22; }
		
		//{DapJtagSequence}
		public Action getDapJtagSequenceAction_22_0() { return cDapJtagSequenceAction_22_0; }
		
		//'DAP_JTAG_Sequence'
		public Keyword getDAP_JTAG_SequenceKeyword_22_1() { return cDAP_JTAG_SequenceKeyword_22_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_22_2() { return cLeftParenthesisKeyword_22_2; }
		
		//cnt=Expression
		public Assignment getCntAssignment_22_3() { return cCntAssignment_22_3; }
		
		//Expression
		public RuleCall getCntExpressionParserRuleCall_22_3_0() { return cCntExpressionParserRuleCall_22_3_0; }
		
		//','
		public Keyword getCommaKeyword_22_4() { return cCommaKeyword_22_4; }
		
		//tms=Expression
		public Assignment getTmsAssignment_22_5() { return cTmsAssignment_22_5; }
		
		//Expression
		public RuleCall getTmsExpressionParserRuleCall_22_5_0() { return cTmsExpressionParserRuleCall_22_5_0; }
		
		//','
		public Keyword getCommaKeyword_22_6() { return cCommaKeyword_22_6; }
		
		//tdi=Expression
		public Assignment getTdiAssignment_22_7() { return cTdiAssignment_22_7; }
		
		//Expression
		public RuleCall getTdiExpressionParserRuleCall_22_7_0() { return cTdiExpressionParserRuleCall_22_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_22_8() { return cRightParenthesisKeyword_22_8; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cValueAlternatives_0_1_0 = (Alternatives)cValueAssignment_0_1.eContents().get(0);
		private final RuleCall cValueDECTerminalRuleCall_0_1_0_0 = (RuleCall)cValueAlternatives_0_1_0.eContents().get(0);
		private final RuleCall cValueHEXTerminalRuleCall_0_1_0_1 = (RuleCall)cValueAlternatives_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cVariableRefAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cVariableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cVariableVariableDeclarationCrossReference_2_1_0 = (CrossReference)cVariableAssignment_2_1.eContents().get(0);
		private final RuleCall cVariableVariableDeclarationIDTerminalRuleCall_2_1_0_1 = (RuleCall)cVariableVariableDeclarationCrossReference_2_1_0.eContents().get(1);
		
		//Atomic Expression:
		//	{IntConstant} value=(DEC | HEX) | {StringConstant} value=STRING | {VariableRef} variable=[VariableDeclaration]
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=(DEC | HEX) | {StringConstant} value=STRING | {VariableRef} variable=[VariableDeclaration]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=(DEC | HEX)
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=(DEC | HEX)
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//(DEC | HEX)
		public Alternatives getValueAlternatives_0_1_0() { return cValueAlternatives_0_1_0; }
		
		//DEC
		public RuleCall getValueDECTerminalRuleCall_0_1_0_0() { return cValueDECTerminalRuleCall_0_1_0_0; }
		
		//HEX
		public RuleCall getValueHEXTerminalRuleCall_0_1_0_1() { return cValueHEXTerminalRuleCall_0_1_0_1; }
		
		//{StringConstant} value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringConstant}
		public Action getStringConstantAction_1_0() { return cStringConstantAction_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//{VariableRef} variable=[VariableDeclaration]
		public Group getGroup_2() { return cGroup_2; }
		
		//{VariableRef}
		public Action getVariableRefAction_2_0() { return cVariableRefAction_2_0; }
		
		//variable=[VariableDeclaration]
		public Assignment getVariableAssignment_2_1() { return cVariableAssignment_2_1; }
		
		//[VariableDeclaration]
		public CrossReference getVariableVariableDeclarationCrossReference_2_1_0() { return cVariableVariableDeclarationCrossReference_2_1_0; }
		
		//ID
		public RuleCall getVariableVariableDeclarationIDTerminalRuleCall_2_1_0_1() { return cVariableVariableDeclarationIDTerminalRuleCall_2_1_0_1; }
	}
	
	
	private final DebugSeqModelElements pDebugSeqModel;
	private final DebugVarsElements pDebugVars;
	private final StatementElements pStatement;
	private final VariableDeclarationElements pVariableDeclaration;
	private final SequencesElements pSequences;
	private final SequenceElements pSequence;
	private final CodeBlockElements pCodeBlock;
	private final BlockElements pBlock;
	private final ControlElements pControl;
	private final ExpressionElements pExpression;
	private final AssignmentElements pAssignment;
	private final TernaryElements pTernary;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final BitOrElements pBitOr;
	private final BitXorElements pBitXor;
	private final BitAndElements pBitAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final ShiftElements pShift;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MulOrDivElements pMulOrDiv;
	private final PrimaryElements pPrimary;
	private final ParameterElements pParameter;
	private final FunctionCallElements pFunctionCall;
	private final AtomicElements pAtomic;
	private final TerminalRule tDEC;
	private final TerminalRule tHEX;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DebugSeqGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDebugSeqModel = new DebugSeqModelElements();
		this.pDebugVars = new DebugVarsElements();
		this.pStatement = new StatementElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pSequences = new SequencesElements();
		this.pSequence = new SequenceElements();
		this.pCodeBlock = new CodeBlockElements();
		this.pBlock = new BlockElements();
		this.pControl = new ControlElements();
		this.pExpression = new ExpressionElements();
		this.pAssignment = new AssignmentElements();
		this.pTernary = new TernaryElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pBitOr = new BitOrElements();
		this.pBitXor = new BitXorElements();
		this.pBitAnd = new BitAndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pShift = new ShiftElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pPrimary = new PrimaryElements();
		this.pParameter = new ParameterElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pAtomic = new AtomicElements();
		this.tDEC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.DEC");
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.HEX");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.ML_COMMENT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.arm.cmsis.pack.debugseq.DebugSeq.STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.arm.cmsis.pack.debugseq.DebugSeq".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DebugSeqModel:
	//	debugvars=DebugVars
	//	sequences=Sequences?;
	public DebugSeqModelElements getDebugSeqModelAccess() {
		return pDebugSeqModel;
	}
	
	public ParserRule getDebugSeqModelRule() {
		return getDebugSeqModelAccess().getRule();
	}
	
	//DebugVars:
	//	{DebugVars} '<debugvars' (('configfile=' configfile=STRING)? & ('version=' version=STRING)? & ('Pname='
	//	pname=STRING)?) '>'
	//	statements+=Statement*
	//	'</debugvars>';
	public DebugVarsElements getDebugVarsAccess() {
		return pDebugVars;
	}
	
	public ParserRule getDebugVarsRule() {
		return getDebugVarsAccess().getRule();
	}
	
	//Statement:
	//	VariableDeclaration ';' | Expression ';';
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//VariableDeclaration:
	//	'__var' name=ID '=' value=Expression;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//Sequences:
	//	{Sequences} '<sequences>'
	//	sequences+=Sequence*
	//	'</sequences>';
	public SequencesElements getSequencesAccess() {
		return pSequences;
	}
	
	public ParserRule getSequencesRule() {
		return getSequencesAccess().getRule();
	}
	
	//Sequence:
	//	'<sequence' ('name=' '"' name=ID '"' & ('disable=' '"' disable=DEC '"')? & ('Pname=' pname=STRING)? & ('info='
	//	info=STRING)?) ('>' codeblocks+=CodeBlock* '</sequence>' | '/>');
	public SequenceElements getSequenceAccess() {
		return pSequence;
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}
	
	//CodeBlock:
	//	Block | Control;
	public CodeBlockElements getCodeBlockAccess() {
		return pCodeBlock;
	}
	
	public ParserRule getCodeBlockRule() {
		return getCodeBlockAccess().getRule();
	}
	
	//Block:
	//	{Block} '<block' (('atomic=' '"' atomic=DEC '"')? & ('info=' info=STRING)?) ('>' statements+=Statement* '</block>' |
	//	'/>');
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Control:
	//	{Control} '<control' (('if=' '"' if=Expression '"')? & ('while=' '"' while=Expression '"')? & ('timeout=' '"'
	//	timeout=DEC '"')? & ('info=' info=STRING)?) ('>' codeblocks+=CodeBlock* '</control>' | '/>');
	public ControlElements getControlAccess() {
		return pControl;
	}
	
	public ParserRule getControlRule() {
		return getControlAccess().getRule();
	}
	
	//Expression:
	//	Assignment;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Assignment Expression:
	//	Ternary ({Assignment.left=current} op=('=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&lt;&lt;=' | '&gt;&gt;=' | '&amp;='
	//	| '^=' | '|=') right=Expression)?
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Ternary Expression:
	//	Or ({Ternary.left=current} "?" exp1=Expression ":" exp2=Ternary)?
	public TernaryElements getTernaryAccess() {
		return pTernary;
	}
	
	public ParserRule getTernaryRule() {
		return getTernaryAccess().getRule();
	}
	
	//Or Expression:
	//	And ({Or.left=current} "||" right=And)*
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Expression:
	//	BitOr ({And.left=current} "&amp;&amp;" right=BitOr)*
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//BitOr Expression:
	//	BitXor ({BitOr.left=current} "|" right=BitXor)*
	public BitOrElements getBitOrAccess() {
		return pBitOr;
	}
	
	public ParserRule getBitOrRule() {
		return getBitOrAccess().getRule();
	}
	
	//BitXor Expression:
	//	BitAnd ({BitXor.left=current} "^" right=BitAnd)*
	public BitXorElements getBitXorAccess() {
		return pBitXor;
	}
	
	public ParserRule getBitXorRule() {
		return getBitXorAccess().getRule();
	}
	
	//BitAnd Expression:
	//	Equality ({BitAnd.left=current} "&amp;" right=Equality)*
	public BitAndElements getBitAndAccess() {
		return pBitAnd;
	}
	
	public ParserRule getBitAndRule() {
		return getBitAndAccess().getRule();
	}
	
	//Equality Expression:
	//	Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison Expression:
	//	Shift ({Comparison.left=current} op=("&gt;=" | "&lt;=" | "&gt;" | "&lt;") right=Shift)*
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//Shift Expression:
	//	PlusOrMinus ({Shift.left=current} op=("&lt;&lt;" | "&gt;&gt;") right=PlusOrMinus)*
	public ShiftElements getShiftAccess() {
		return pShift;
	}
	
	public ParserRule getShiftRule() {
		return getShiftAccess().getRule();
	}
	
	//PlusOrMinus Expression:
	//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MulOrDiv Expression:
	//	Primary (({Mul.left=current} '*' | {Div.left=current} '/' | {Rem.left=current} '%') right=Primary)*
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//Primary Expression:
	//	'(' Expression ')' | {Not} "!" expression=Primary | {BitNot} "~" expression=Primary | FunctionCall | Atomic
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Parameter:
	//	',' Expression;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//FunctionCall Expression:
	//	{SequenceCall} 'Sequence' '(' '"' seqname=ID '"' ')' | {Query} 'Query' '(' type=Expression ',' message=STRING ','
	//	default=Expression ')' | {QueryValue} 'QueryValue' '(' message=STRING ',' default=Expression ')' | {Message}
	//	'Message' '(' type=Expression ',' format=STRING parameters+=Parameter* ')' | {LoadDebugInfo} 'LoadDebugInfo' '('
	//	path=STRING ')' | {Read8} 'Read8' '(' addr=Expression ')' | {Read16} 'Read16' '(' addr=Expression ')' | {Read32}
	//	'Read32' '(' addr=Expression ')' | {Read64} 'Read64' '(' addr=Expression ')' | {ReadAP} 'ReadAP' '(' addr=Expression
	//	')' | {ReadDP} 'ReadDP' '(' addr=Expression ')' | {Write8} 'Write8' '(' addr=Expression ',' val=Expression ')' |
	//	{Write16} 'Write16' '(' addr=Expression ',' val=Expression ')' | {Write32} 'Write32' '(' addr=Expression ','
	//	val=Expression ')' | {Write64} 'Write64' '(' addr=Expression ',' val=Expression ')' | {WriteAP} 'WriteAP' '('
	//	addr=Expression ',' val=Expression ')' | {WriteDP} 'WriteDP' '(' addr=Expression ',' val=Expression ')' | {DapDelay}
	//	'DAP_Delay' '(' delay=Expression ')' | {DapWriteABORT} 'DAP_WriteABORT' '(' value=Expression ')' | {DapSwjPins}
	//	'DAP_SWJ_Pins' '(' pinout=Expression ',' pinselect=Expression ',' pinwait=Expression ')' | {DapSwjClock}
	//	'DAP_SWJ_Clock' '(' value=Expression ')' | {DapSwjSequence} 'DAP_SWJ_Sequence' '(' cnt=Expression ',' val=Expression
	//	')' | {DapJtagSequence} 'DAP_JTAG_Sequence' '(' cnt=Expression ',' tms=Expression ',' tdi=Expression ')'
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//Atomic Expression:
	//	{IntConstant} value=(DEC | HEX) | {StringConstant} value=STRING | {VariableRef} variable=[VariableDeclaration]
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//terminal DEC returns ecore::ELong:
	//	'0' | '1'..'9' '0'..'9'*;
	public TerminalRule getDECRule() {
		return tDEC;
	}
	
	//terminal HEX returns ecore::ELong:
	//	'0x' ('0'..'9' | 'a'..'f' | 'A'..'F')+;
	public TerminalRule getHEXRule() {
		return tHEX;
	}
	
	//terminal ML_COMMENT:
	//	'<!--'->'-->';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
