/**
 * generated by Xtext 2.10.0
 */
package com.arm.cmsis.pack.debugseq.debugSeq.util;

import com.arm.cmsis.pack.debugseq.debugSeq.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.arm.cmsis.pack.debugseq.debugSeq.DebugSeqPackage
 * @generated
 */
public class DebugSeqAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DebugSeqPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DebugSeqAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = DebugSeqPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DebugSeqSwitch<Adapter> modelSwitch =
    new DebugSeqSwitch<Adapter>()
    {
      @Override
      public Adapter caseDebugSeqModel(DebugSeqModel object)
      {
        return createDebugSeqModelAdapter();
      }
      @Override
      public Adapter caseDebugVars(DebugVars object)
      {
        return createDebugVarsAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseVariableDeclaration(VariableDeclaration object)
      {
        return createVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseSequences(Sequences object)
      {
        return createSequencesAdapter();
      }
      @Override
      public Adapter caseSequence(Sequence object)
      {
        return createSequenceAdapter();
      }
      @Override
      public Adapter caseCodeBlock(CodeBlock object)
      {
        return createCodeBlockAdapter();
      }
      @Override
      public Adapter caseBlock(Block object)
      {
        return createBlockAdapter();
      }
      @Override
      public Adapter caseControl(Control object)
      {
        return createControlAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseParameter(Parameter object)
      {
        return createParameterAdapter();
      }
      @Override
      public Adapter caseAssignment(Assignment object)
      {
        return createAssignmentAdapter();
      }
      @Override
      public Adapter caseTernary(Ternary object)
      {
        return createTernaryAdapter();
      }
      @Override
      public Adapter caseOr(Or object)
      {
        return createOrAdapter();
      }
      @Override
      public Adapter caseAnd(And object)
      {
        return createAndAdapter();
      }
      @Override
      public Adapter caseBitOr(BitOr object)
      {
        return createBitOrAdapter();
      }
      @Override
      public Adapter caseBitXor(BitXor object)
      {
        return createBitXorAdapter();
      }
      @Override
      public Adapter caseBitAnd(BitAnd object)
      {
        return createBitAndAdapter();
      }
      @Override
      public Adapter caseEquality(Equality object)
      {
        return createEqualityAdapter();
      }
      @Override
      public Adapter caseComparison(Comparison object)
      {
        return createComparisonAdapter();
      }
      @Override
      public Adapter caseShift(Shift object)
      {
        return createShiftAdapter();
      }
      @Override
      public Adapter casePlus(Plus object)
      {
        return createPlusAdapter();
      }
      @Override
      public Adapter caseMinus(Minus object)
      {
        return createMinusAdapter();
      }
      @Override
      public Adapter caseMul(Mul object)
      {
        return createMulAdapter();
      }
      @Override
      public Adapter caseDiv(Div object)
      {
        return createDivAdapter();
      }
      @Override
      public Adapter caseRem(Rem object)
      {
        return createRemAdapter();
      }
      @Override
      public Adapter caseNot(Not object)
      {
        return createNotAdapter();
      }
      @Override
      public Adapter caseBitNot(BitNot object)
      {
        return createBitNotAdapter();
      }
      @Override
      public Adapter caseSequenceCall(SequenceCall object)
      {
        return createSequenceCallAdapter();
      }
      @Override
      public Adapter caseQuery(Query object)
      {
        return createQueryAdapter();
      }
      @Override
      public Adapter caseQueryValue(QueryValue object)
      {
        return createQueryValueAdapter();
      }
      @Override
      public Adapter caseMessage(Message object)
      {
        return createMessageAdapter();
      }
      @Override
      public Adapter caseLoadDebugInfo(LoadDebugInfo object)
      {
        return createLoadDebugInfoAdapter();
      }
      @Override
      public Adapter caseRead8(Read8 object)
      {
        return createRead8Adapter();
      }
      @Override
      public Adapter caseRead16(Read16 object)
      {
        return createRead16Adapter();
      }
      @Override
      public Adapter caseRead32(Read32 object)
      {
        return createRead32Adapter();
      }
      @Override
      public Adapter caseRead64(Read64 object)
      {
        return createRead64Adapter();
      }
      @Override
      public Adapter caseReadAP(ReadAP object)
      {
        return createReadAPAdapter();
      }
      @Override
      public Adapter caseReadDP(ReadDP object)
      {
        return createReadDPAdapter();
      }
      @Override
      public Adapter caseWrite8(Write8 object)
      {
        return createWrite8Adapter();
      }
      @Override
      public Adapter caseWrite16(Write16 object)
      {
        return createWrite16Adapter();
      }
      @Override
      public Adapter caseWrite32(Write32 object)
      {
        return createWrite32Adapter();
      }
      @Override
      public Adapter caseWrite64(Write64 object)
      {
        return createWrite64Adapter();
      }
      @Override
      public Adapter caseWriteAP(WriteAP object)
      {
        return createWriteAPAdapter();
      }
      @Override
      public Adapter caseWriteDP(WriteDP object)
      {
        return createWriteDPAdapter();
      }
      @Override
      public Adapter caseDapDelay(DapDelay object)
      {
        return createDapDelayAdapter();
      }
      @Override
      public Adapter caseDapWriteABORT(DapWriteABORT object)
      {
        return createDapWriteABORTAdapter();
      }
      @Override
      public Adapter caseDapSwjPins(DapSwjPins object)
      {
        return createDapSwjPinsAdapter();
      }
      @Override
      public Adapter caseDapSwjClock(DapSwjClock object)
      {
        return createDapSwjClockAdapter();
      }
      @Override
      public Adapter caseDapSwjSequence(DapSwjSequence object)
      {
        return createDapSwjSequenceAdapter();
      }
      @Override
      public Adapter caseDapJtagSequence(DapJtagSequence object)
      {
        return createDapJtagSequenceAdapter();
      }
      @Override
      public Adapter caseIntConstant(IntConstant object)
      {
        return createIntConstantAdapter();
      }
      @Override
      public Adapter caseStringConstant(StringConstant object)
      {
        return createStringConstantAdapter();
      }
      @Override
      public Adapter caseVariableRef(VariableRef object)
      {
        return createVariableRefAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.DebugSeqModel <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.DebugSeqModel
   * @generated
   */
  public Adapter createDebugSeqModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.DebugVars <em>Debug Vars</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.DebugVars
   * @generated
   */
  public Adapter createDebugVarsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.VariableDeclaration <em>Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.VariableDeclaration
   * @generated
   */
  public Adapter createVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Sequences <em>Sequences</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Sequences
   * @generated
   */
  public Adapter createSequencesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Sequence <em>Sequence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Sequence
   * @generated
   */
  public Adapter createSequenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.CodeBlock <em>Code Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.CodeBlock
   * @generated
   */
  public Adapter createCodeBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Block <em>Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Block
   * @generated
   */
  public Adapter createBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Control <em>Control</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Control
   * @generated
   */
  public Adapter createControlAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Parameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Parameter
   * @generated
   */
  public Adapter createParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Assignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Assignment
   * @generated
   */
  public Adapter createAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Ternary <em>Ternary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Ternary
   * @generated
   */
  public Adapter createTernaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Or <em>Or</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Or
   * @generated
   */
  public Adapter createOrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.And <em>And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.And
   * @generated
   */
  public Adapter createAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.BitOr <em>Bit Or</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.BitOr
   * @generated
   */
  public Adapter createBitOrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.BitXor <em>Bit Xor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.BitXor
   * @generated
   */
  public Adapter createBitXorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.BitAnd <em>Bit And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.BitAnd
   * @generated
   */
  public Adapter createBitAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Equality <em>Equality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Equality
   * @generated
   */
  public Adapter createEqualityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Comparison <em>Comparison</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Comparison
   * @generated
   */
  public Adapter createComparisonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Shift <em>Shift</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Shift
   * @generated
   */
  public Adapter createShiftAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Plus <em>Plus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Plus
   * @generated
   */
  public Adapter createPlusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Minus <em>Minus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Minus
   * @generated
   */
  public Adapter createMinusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Mul <em>Mul</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Mul
   * @generated
   */
  public Adapter createMulAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Div <em>Div</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Div
   * @generated
   */
  public Adapter createDivAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Rem <em>Rem</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Rem
   * @generated
   */
  public Adapter createRemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Not <em>Not</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Not
   * @generated
   */
  public Adapter createNotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.BitNot <em>Bit Not</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.BitNot
   * @generated
   */
  public Adapter createBitNotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.SequenceCall <em>Sequence Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.SequenceCall
   * @generated
   */
  public Adapter createSequenceCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Query <em>Query</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Query
   * @generated
   */
  public Adapter createQueryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.QueryValue <em>Query Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.QueryValue
   * @generated
   */
  public Adapter createQueryValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Message <em>Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Message
   * @generated
   */
  public Adapter createMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.LoadDebugInfo <em>Load Debug Info</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.LoadDebugInfo
   * @generated
   */
  public Adapter createLoadDebugInfoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Read8 <em>Read8</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Read8
   * @generated
   */
  public Adapter createRead8Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Read16 <em>Read16</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Read16
   * @generated
   */
  public Adapter createRead16Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Read32 <em>Read32</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Read32
   * @generated
   */
  public Adapter createRead32Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Read64 <em>Read64</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Read64
   * @generated
   */
  public Adapter createRead64Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.ReadAP <em>Read AP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.ReadAP
   * @generated
   */
  public Adapter createReadAPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.ReadDP <em>Read DP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.ReadDP
   * @generated
   */
  public Adapter createReadDPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Write8 <em>Write8</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Write8
   * @generated
   */
  public Adapter createWrite8Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Write16 <em>Write16</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Write16
   * @generated
   */
  public Adapter createWrite16Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Write32 <em>Write32</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Write32
   * @generated
   */
  public Adapter createWrite32Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.Write64 <em>Write64</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.Write64
   * @generated
   */
  public Adapter createWrite64Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.WriteAP <em>Write AP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.WriteAP
   * @generated
   */
  public Adapter createWriteAPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.WriteDP <em>Write DP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.WriteDP
   * @generated
   */
  public Adapter createWriteDPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.DapDelay <em>Dap Delay</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.DapDelay
   * @generated
   */
  public Adapter createDapDelayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.DapWriteABORT <em>Dap Write ABORT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.DapWriteABORT
   * @generated
   */
  public Adapter createDapWriteABORTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.DapSwjPins <em>Dap Swj Pins</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.DapSwjPins
   * @generated
   */
  public Adapter createDapSwjPinsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.DapSwjClock <em>Dap Swj Clock</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.DapSwjClock
   * @generated
   */
  public Adapter createDapSwjClockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.DapSwjSequence <em>Dap Swj Sequence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.DapSwjSequence
   * @generated
   */
  public Adapter createDapSwjSequenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.DapJtagSequence <em>Dap Jtag Sequence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.DapJtagSequence
   * @generated
   */
  public Adapter createDapJtagSequenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.IntConstant <em>Int Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.IntConstant
   * @generated
   */
  public Adapter createIntConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.StringConstant <em>String Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.StringConstant
   * @generated
   */
  public Adapter createStringConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arm.cmsis.pack.debugseq.debugSeq.VariableRef <em>Variable Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arm.cmsis.pack.debugseq.debugSeq.VariableRef
   * @generated
   */
  public Adapter createVariableRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //DebugSeqAdapterFactory
