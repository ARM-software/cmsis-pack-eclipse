/**
 * generated by Xtext 2.10.0
 */
package com.arm.cmsis.pack.debugseq.debugSeq.util;

import com.arm.cmsis.pack.debugseq.debugSeq.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see com.arm.cmsis.pack.debugseq.debugSeq.DebugSeqPackage
 * @generated
 */
public class DebugSeqSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DebugSeqPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DebugSeqSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = DebugSeqPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case DebugSeqPackage.DEBUG_SEQ_MODEL:
      {
        DebugSeqModel debugSeqModel = (DebugSeqModel)theEObject;
        T result = caseDebugSeqModel(debugSeqModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.DEBUG_VARS:
      {
        DebugVars debugVars = (DebugVars)theEObject;
        T result = caseDebugVars(debugVars);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.VARIABLE_DECLARATION:
      {
        VariableDeclaration variableDeclaration = (VariableDeclaration)theEObject;
        T result = caseVariableDeclaration(variableDeclaration);
        if (result == null) result = caseStatement(variableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.SEQUENCES:
      {
        Sequences sequences = (Sequences)theEObject;
        T result = caseSequences(sequences);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.SEQUENCE:
      {
        Sequence sequence = (Sequence)theEObject;
        T result = caseSequence(sequence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.CODE_BLOCK:
      {
        CodeBlock codeBlock = (CodeBlock)theEObject;
        T result = caseCodeBlock(codeBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.BLOCK:
      {
        Block block = (Block)theEObject;
        T result = caseBlock(block);
        if (result == null) result = caseCodeBlock(block);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.CONTROL:
      {
        Control control = (Control)theEObject;
        T result = caseControl(control);
        if (result == null) result = caseCodeBlock(control);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = caseStatement(expression);
        if (result == null) result = caseParameter(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.PARAMETER:
      {
        Parameter parameter = (Parameter)theEObject;
        T result = caseParameter(parameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.ASSIGNMENT:
      {
        Assignment assignment = (Assignment)theEObject;
        T result = caseAssignment(assignment);
        if (result == null) result = caseExpression(assignment);
        if (result == null) result = caseStatement(assignment);
        if (result == null) result = caseParameter(assignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.TERNARY:
      {
        Ternary ternary = (Ternary)theEObject;
        T result = caseTernary(ternary);
        if (result == null) result = caseExpression(ternary);
        if (result == null) result = caseStatement(ternary);
        if (result == null) result = caseParameter(ternary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.OR:
      {
        Or or = (Or)theEObject;
        T result = caseOr(or);
        if (result == null) result = caseExpression(or);
        if (result == null) result = caseStatement(or);
        if (result == null) result = caseParameter(or);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.AND:
      {
        And and = (And)theEObject;
        T result = caseAnd(and);
        if (result == null) result = caseExpression(and);
        if (result == null) result = caseStatement(and);
        if (result == null) result = caseParameter(and);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.BIT_OR:
      {
        BitOr bitOr = (BitOr)theEObject;
        T result = caseBitOr(bitOr);
        if (result == null) result = caseExpression(bitOr);
        if (result == null) result = caseStatement(bitOr);
        if (result == null) result = caseParameter(bitOr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.BIT_XOR:
      {
        BitXor bitXor = (BitXor)theEObject;
        T result = caseBitXor(bitXor);
        if (result == null) result = caseExpression(bitXor);
        if (result == null) result = caseStatement(bitXor);
        if (result == null) result = caseParameter(bitXor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.BIT_AND:
      {
        BitAnd bitAnd = (BitAnd)theEObject;
        T result = caseBitAnd(bitAnd);
        if (result == null) result = caseExpression(bitAnd);
        if (result == null) result = caseStatement(bitAnd);
        if (result == null) result = caseParameter(bitAnd);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.EQUALITY:
      {
        Equality equality = (Equality)theEObject;
        T result = caseEquality(equality);
        if (result == null) result = caseExpression(equality);
        if (result == null) result = caseStatement(equality);
        if (result == null) result = caseParameter(equality);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.COMPARISON:
      {
        Comparison comparison = (Comparison)theEObject;
        T result = caseComparison(comparison);
        if (result == null) result = caseExpression(comparison);
        if (result == null) result = caseStatement(comparison);
        if (result == null) result = caseParameter(comparison);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.SHIFT:
      {
        Shift shift = (Shift)theEObject;
        T result = caseShift(shift);
        if (result == null) result = caseExpression(shift);
        if (result == null) result = caseStatement(shift);
        if (result == null) result = caseParameter(shift);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.PLUS:
      {
        Plus plus = (Plus)theEObject;
        T result = casePlus(plus);
        if (result == null) result = caseExpression(plus);
        if (result == null) result = caseStatement(plus);
        if (result == null) result = caseParameter(plus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.MINUS:
      {
        Minus minus = (Minus)theEObject;
        T result = caseMinus(minus);
        if (result == null) result = caseExpression(minus);
        if (result == null) result = caseStatement(minus);
        if (result == null) result = caseParameter(minus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.MUL:
      {
        Mul mul = (Mul)theEObject;
        T result = caseMul(mul);
        if (result == null) result = caseExpression(mul);
        if (result == null) result = caseStatement(mul);
        if (result == null) result = caseParameter(mul);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.DIV:
      {
        Div div = (Div)theEObject;
        T result = caseDiv(div);
        if (result == null) result = caseExpression(div);
        if (result == null) result = caseStatement(div);
        if (result == null) result = caseParameter(div);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.REM:
      {
        Rem rem = (Rem)theEObject;
        T result = caseRem(rem);
        if (result == null) result = caseExpression(rem);
        if (result == null) result = caseStatement(rem);
        if (result == null) result = caseParameter(rem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.NOT:
      {
        Not not = (Not)theEObject;
        T result = caseNot(not);
        if (result == null) result = caseExpression(not);
        if (result == null) result = caseStatement(not);
        if (result == null) result = caseParameter(not);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.BIT_NOT:
      {
        BitNot bitNot = (BitNot)theEObject;
        T result = caseBitNot(bitNot);
        if (result == null) result = caseExpression(bitNot);
        if (result == null) result = caseStatement(bitNot);
        if (result == null) result = caseParameter(bitNot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.SEQUENCE_CALL:
      {
        SequenceCall sequenceCall = (SequenceCall)theEObject;
        T result = caseSequenceCall(sequenceCall);
        if (result == null) result = caseExpression(sequenceCall);
        if (result == null) result = caseStatement(sequenceCall);
        if (result == null) result = caseParameter(sequenceCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.QUERY:
      {
        Query query = (Query)theEObject;
        T result = caseQuery(query);
        if (result == null) result = caseExpression(query);
        if (result == null) result = caseStatement(query);
        if (result == null) result = caseParameter(query);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.QUERY_VALUE:
      {
        QueryValue queryValue = (QueryValue)theEObject;
        T result = caseQueryValue(queryValue);
        if (result == null) result = caseExpression(queryValue);
        if (result == null) result = caseStatement(queryValue);
        if (result == null) result = caseParameter(queryValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.MESSAGE:
      {
        Message message = (Message)theEObject;
        T result = caseMessage(message);
        if (result == null) result = caseExpression(message);
        if (result == null) result = caseStatement(message);
        if (result == null) result = caseParameter(message);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.LOAD_DEBUG_INFO:
      {
        LoadDebugInfo loadDebugInfo = (LoadDebugInfo)theEObject;
        T result = caseLoadDebugInfo(loadDebugInfo);
        if (result == null) result = caseExpression(loadDebugInfo);
        if (result == null) result = caseStatement(loadDebugInfo);
        if (result == null) result = caseParameter(loadDebugInfo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.READ8:
      {
        Read8 read8 = (Read8)theEObject;
        T result = caseRead8(read8);
        if (result == null) result = caseExpression(read8);
        if (result == null) result = caseStatement(read8);
        if (result == null) result = caseParameter(read8);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.READ16:
      {
        Read16 read16 = (Read16)theEObject;
        T result = caseRead16(read16);
        if (result == null) result = caseExpression(read16);
        if (result == null) result = caseStatement(read16);
        if (result == null) result = caseParameter(read16);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.READ32:
      {
        Read32 read32 = (Read32)theEObject;
        T result = caseRead32(read32);
        if (result == null) result = caseExpression(read32);
        if (result == null) result = caseStatement(read32);
        if (result == null) result = caseParameter(read32);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.READ64:
      {
        Read64 read64 = (Read64)theEObject;
        T result = caseRead64(read64);
        if (result == null) result = caseExpression(read64);
        if (result == null) result = caseStatement(read64);
        if (result == null) result = caseParameter(read64);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.READ_AP:
      {
        ReadAP readAP = (ReadAP)theEObject;
        T result = caseReadAP(readAP);
        if (result == null) result = caseExpression(readAP);
        if (result == null) result = caseStatement(readAP);
        if (result == null) result = caseParameter(readAP);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.READ_DP:
      {
        ReadDP readDP = (ReadDP)theEObject;
        T result = caseReadDP(readDP);
        if (result == null) result = caseExpression(readDP);
        if (result == null) result = caseStatement(readDP);
        if (result == null) result = caseParameter(readDP);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.WRITE8:
      {
        Write8 write8 = (Write8)theEObject;
        T result = caseWrite8(write8);
        if (result == null) result = caseExpression(write8);
        if (result == null) result = caseStatement(write8);
        if (result == null) result = caseParameter(write8);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.WRITE16:
      {
        Write16 write16 = (Write16)theEObject;
        T result = caseWrite16(write16);
        if (result == null) result = caseExpression(write16);
        if (result == null) result = caseStatement(write16);
        if (result == null) result = caseParameter(write16);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.WRITE32:
      {
        Write32 write32 = (Write32)theEObject;
        T result = caseWrite32(write32);
        if (result == null) result = caseExpression(write32);
        if (result == null) result = caseStatement(write32);
        if (result == null) result = caseParameter(write32);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.WRITE64:
      {
        Write64 write64 = (Write64)theEObject;
        T result = caseWrite64(write64);
        if (result == null) result = caseExpression(write64);
        if (result == null) result = caseStatement(write64);
        if (result == null) result = caseParameter(write64);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.WRITE_AP:
      {
        WriteAP writeAP = (WriteAP)theEObject;
        T result = caseWriteAP(writeAP);
        if (result == null) result = caseExpression(writeAP);
        if (result == null) result = caseStatement(writeAP);
        if (result == null) result = caseParameter(writeAP);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.WRITE_DP:
      {
        WriteDP writeDP = (WriteDP)theEObject;
        T result = caseWriteDP(writeDP);
        if (result == null) result = caseExpression(writeDP);
        if (result == null) result = caseStatement(writeDP);
        if (result == null) result = caseParameter(writeDP);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.DAP_DELAY:
      {
        DapDelay dapDelay = (DapDelay)theEObject;
        T result = caseDapDelay(dapDelay);
        if (result == null) result = caseExpression(dapDelay);
        if (result == null) result = caseStatement(dapDelay);
        if (result == null) result = caseParameter(dapDelay);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.DAP_WRITE_ABORT:
      {
        DapWriteABORT dapWriteABORT = (DapWriteABORT)theEObject;
        T result = caseDapWriteABORT(dapWriteABORT);
        if (result == null) result = caseExpression(dapWriteABORT);
        if (result == null) result = caseStatement(dapWriteABORT);
        if (result == null) result = caseParameter(dapWriteABORT);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.DAP_SWJ_PINS:
      {
        DapSwjPins dapSwjPins = (DapSwjPins)theEObject;
        T result = caseDapSwjPins(dapSwjPins);
        if (result == null) result = caseExpression(dapSwjPins);
        if (result == null) result = caseStatement(dapSwjPins);
        if (result == null) result = caseParameter(dapSwjPins);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.DAP_SWJ_CLOCK:
      {
        DapSwjClock dapSwjClock = (DapSwjClock)theEObject;
        T result = caseDapSwjClock(dapSwjClock);
        if (result == null) result = caseExpression(dapSwjClock);
        if (result == null) result = caseStatement(dapSwjClock);
        if (result == null) result = caseParameter(dapSwjClock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.DAP_SWJ_SEQUENCE:
      {
        DapSwjSequence dapSwjSequence = (DapSwjSequence)theEObject;
        T result = caseDapSwjSequence(dapSwjSequence);
        if (result == null) result = caseExpression(dapSwjSequence);
        if (result == null) result = caseStatement(dapSwjSequence);
        if (result == null) result = caseParameter(dapSwjSequence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.DAP_JTAG_SEQUENCE:
      {
        DapJtagSequence dapJtagSequence = (DapJtagSequence)theEObject;
        T result = caseDapJtagSequence(dapJtagSequence);
        if (result == null) result = caseExpression(dapJtagSequence);
        if (result == null) result = caseStatement(dapJtagSequence);
        if (result == null) result = caseParameter(dapJtagSequence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.INT_CONSTANT:
      {
        IntConstant intConstant = (IntConstant)theEObject;
        T result = caseIntConstant(intConstant);
        if (result == null) result = caseExpression(intConstant);
        if (result == null) result = caseStatement(intConstant);
        if (result == null) result = caseParameter(intConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.STRING_CONSTANT:
      {
        StringConstant stringConstant = (StringConstant)theEObject;
        T result = caseStringConstant(stringConstant);
        if (result == null) result = caseExpression(stringConstant);
        if (result == null) result = caseStatement(stringConstant);
        if (result == null) result = caseParameter(stringConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DebugSeqPackage.VARIABLE_REF:
      {
        VariableRef variableRef = (VariableRef)theEObject;
        T result = caseVariableRef(variableRef);
        if (result == null) result = caseExpression(variableRef);
        if (result == null) result = caseStatement(variableRef);
        if (result == null) result = caseParameter(variableRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDebugSeqModel(DebugSeqModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Debug Vars</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Debug Vars</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDebugVars(DebugVars object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableDeclaration(VariableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequences</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequences</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequences(Sequences object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequence(Sequence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Code Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Code Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCodeBlock(CodeBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlock(Block object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Control</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Control</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseControl(Control object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameter(Parameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignment(Assignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ternary</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ternary</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTernary(Ternary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Or</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Or</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOr(Or object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnd(And object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bit Or</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bit Or</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBitOr(BitOr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bit Xor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bit Xor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBitXor(BitXor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bit And</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bit And</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBitAnd(BitAnd object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equality</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equality</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEquality(Equality object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comparison</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comparison</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComparison(Comparison object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Shift</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Shift</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseShift(Shift object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Plus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Plus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlus(Plus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Minus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Minus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMinus(Minus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mul</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mul</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMul(Mul object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Div</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Div</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDiv(Div object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rem</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rem</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRem(Rem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNot(Not object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bit Not</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bit Not</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBitNot(BitNot object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenceCall(SequenceCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQuery(Query object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Query Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Query Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQueryValue(QueryValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMessage(Message object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Load Debug Info</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Load Debug Info</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLoadDebugInfo(LoadDebugInfo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Read8</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Read8</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRead8(Read8 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Read16</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Read16</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRead16(Read16 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Read32</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Read32</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRead32(Read32 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Read64</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Read64</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRead64(Read64 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Read AP</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Read AP</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReadAP(ReadAP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Read DP</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Read DP</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReadDP(ReadDP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Write8</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Write8</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWrite8(Write8 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Write16</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Write16</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWrite16(Write16 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Write32</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Write32</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWrite32(Write32 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Write64</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Write64</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWrite64(Write64 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Write AP</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Write AP</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWriteAP(WriteAP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Write DP</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Write DP</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWriteDP(WriteDP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dap Delay</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dap Delay</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDapDelay(DapDelay object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dap Write ABORT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dap Write ABORT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDapWriteABORT(DapWriteABORT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dap Swj Pins</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dap Swj Pins</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDapSwjPins(DapSwjPins object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dap Swj Clock</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dap Swj Clock</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDapSwjClock(DapSwjClock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dap Swj Sequence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dap Swj Sequence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDapSwjSequence(DapSwjSequence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dap Jtag Sequence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dap Jtag Sequence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDapJtagSequence(DapJtagSequence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntConstant(IntConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringConstant(StringConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableRef(VariableRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //DebugSeqSwitch
