/**
 * generated by Xtext 2.10.0
 */
package com.arm.cmsis.pack.debugseq.debugSeq.impl;

import com.arm.cmsis.pack.debugseq.debugSeq.DebugSeqPackage;
import com.arm.cmsis.pack.debugseq.debugSeq.DebugVars;
import com.arm.cmsis.pack.debugseq.debugSeq.Statement;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Debug Vars</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.arm.cmsis.pack.debugseq.debugSeq.impl.DebugVarsImpl#getConfigfile <em>Configfile</em>}</li>
 *   <li>{@link com.arm.cmsis.pack.debugseq.debugSeq.impl.DebugVarsImpl#getVersion <em>Version</em>}</li>
 *   <li>{@link com.arm.cmsis.pack.debugseq.debugSeq.impl.DebugVarsImpl#getPname <em>Pname</em>}</li>
 *   <li>{@link com.arm.cmsis.pack.debugseq.debugSeq.impl.DebugVarsImpl#getStatements <em>Statements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DebugVarsImpl extends MinimalEObjectImpl.Container implements DebugVars
{
  /**
   * The default value of the '{@link #getConfigfile() <em>Configfile</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConfigfile()
   * @generated
   * @ordered
   */
  protected static final String CONFIGFILE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConfigfile() <em>Configfile</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConfigfile()
   * @generated
   * @ordered
   */
  protected String configfile = CONFIGFILE_EDEFAULT;

  /**
   * The default value of the '{@link #getVersion() <em>Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected static final String VERSION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVersion() <em>Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected String version = VERSION_EDEFAULT;

  /**
   * The default value of the '{@link #getPname() <em>Pname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPname()
   * @generated
   * @ordered
   */
  protected static final String PNAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPname() <em>Pname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPname()
   * @generated
   * @ordered
   */
  protected String pname = PNAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getStatements() <em>Statements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatements()
   * @generated
   * @ordered
   */
  protected EList<Statement> statements;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DebugVarsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DebugSeqPackage.Literals.DEBUG_VARS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getConfigfile()
  {
    return configfile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setConfigfile(String newConfigfile)
  {
    String oldConfigfile = configfile;
    configfile = newConfigfile;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DebugSeqPackage.DEBUG_VARS__CONFIGFILE, oldConfigfile, configfile));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getVersion()
  {
    return version;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVersion(String newVersion)
  {
    String oldVersion = version;
    version = newVersion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DebugSeqPackage.DEBUG_VARS__VERSION, oldVersion, version));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getPname()
  {
    return pname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPname(String newPname)
  {
    String oldPname = pname;
    pname = newPname;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DebugSeqPackage.DEBUG_VARS__PNAME, oldPname, pname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Statement> getStatements()
  {
    if (statements == null)
    {
      statements = new EObjectContainmentEList<Statement>(Statement.class, this, DebugSeqPackage.DEBUG_VARS__STATEMENTS);
    }
    return statements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DebugSeqPackage.DEBUG_VARS__STATEMENTS:
        return ((InternalEList<?>)getStatements()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DebugSeqPackage.DEBUG_VARS__CONFIGFILE:
        return getConfigfile();
      case DebugSeqPackage.DEBUG_VARS__VERSION:
        return getVersion();
      case DebugSeqPackage.DEBUG_VARS__PNAME:
        return getPname();
      case DebugSeqPackage.DEBUG_VARS__STATEMENTS:
        return getStatements();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DebugSeqPackage.DEBUG_VARS__CONFIGFILE:
        setConfigfile((String)newValue);
        return;
      case DebugSeqPackage.DEBUG_VARS__VERSION:
        setVersion((String)newValue);
        return;
      case DebugSeqPackage.DEBUG_VARS__PNAME:
        setPname((String)newValue);
        return;
      case DebugSeqPackage.DEBUG_VARS__STATEMENTS:
        getStatements().clear();
        getStatements().addAll((Collection<? extends Statement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DebugSeqPackage.DEBUG_VARS__CONFIGFILE:
        setConfigfile(CONFIGFILE_EDEFAULT);
        return;
      case DebugSeqPackage.DEBUG_VARS__VERSION:
        setVersion(VERSION_EDEFAULT);
        return;
      case DebugSeqPackage.DEBUG_VARS__PNAME:
        setPname(PNAME_EDEFAULT);
        return;
      case DebugSeqPackage.DEBUG_VARS__STATEMENTS:
        getStatements().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DebugSeqPackage.DEBUG_VARS__CONFIGFILE:
        return CONFIGFILE_EDEFAULT == null ? configfile != null : !CONFIGFILE_EDEFAULT.equals(configfile);
      case DebugSeqPackage.DEBUG_VARS__VERSION:
        return VERSION_EDEFAULT == null ? version != null : !VERSION_EDEFAULT.equals(version);
      case DebugSeqPackage.DEBUG_VARS__PNAME:
        return PNAME_EDEFAULT == null ? pname != null : !PNAME_EDEFAULT.equals(pname);
      case DebugSeqPackage.DEBUG_VARS__STATEMENTS:
        return statements != null && !statements.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (configfile: ");
    result.append(configfile);
    result.append(", version: ");
    result.append(version);
    result.append(", pname: ");
    result.append(pname);
    result.append(')');
    return result.toString();
  }

} //DebugVarsImpl
