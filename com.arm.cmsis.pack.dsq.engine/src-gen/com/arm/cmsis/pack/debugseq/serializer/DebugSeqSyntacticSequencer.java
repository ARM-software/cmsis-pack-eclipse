/*
 * generated by Xtext 2.10.0
 */
package com.arm.cmsis.pack.debugseq.serializer;

import com.arm.cmsis.pack.debugseq.services.DebugSeqGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class DebugSeqSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DebugSeqGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Block_SolidusGreaterThanSignKeyword_3_1_or___GreaterThanSignKeyword_3_0_0_BlockKeyword_3_0_2__;
	protected AbstractElementAlias match_Control_SolidusGreaterThanSignKeyword_3_1_or___GreaterThanSignKeyword_3_0_0_ControlKeyword_3_0_2__;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_0_0_p;
	protected AbstractElementAlias match_Sequence_SolidusGreaterThanSignKeyword_2_1_or___GreaterThanSignKeyword_2_0_0_SequenceKeyword_2_0_2__;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DebugSeqGrammarAccess) access;
		match_Block_SolidusGreaterThanSignKeyword_3_1_or___GreaterThanSignKeyword_3_0_0_BlockKeyword_3_0_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getBlockAccess().getGreaterThanSignKeyword_3_0_0()), new TokenAlias(false, false, grammarAccess.getBlockAccess().getBlockKeyword_3_0_2())), new TokenAlias(false, false, grammarAccess.getBlockAccess().getSolidusGreaterThanSignKeyword_3_1()));
		match_Control_SolidusGreaterThanSignKeyword_3_1_or___GreaterThanSignKeyword_3_0_0_ControlKeyword_3_0_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getControlAccess().getGreaterThanSignKeyword_3_0_0()), new TokenAlias(false, false, grammarAccess.getControlAccess().getControlKeyword_3_0_2())), new TokenAlias(false, false, grammarAccess.getControlAccess().getSolidusGreaterThanSignKeyword_3_1()));
		match_Primary_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
		match_Primary_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
		match_Sequence_SolidusGreaterThanSignKeyword_2_1_or___GreaterThanSignKeyword_2_0_0_SequenceKeyword_2_0_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getSequenceAccess().getGreaterThanSignKeyword_2_0_0()), new TokenAlias(false, false, grammarAccess.getSequenceAccess().getSequenceKeyword_2_0_2())), new TokenAlias(false, false, grammarAccess.getSequenceAccess().getSolidusGreaterThanSignKeyword_2_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Block_SolidusGreaterThanSignKeyword_3_1_or___GreaterThanSignKeyword_3_0_0_BlockKeyword_3_0_2__.equals(syntax))
				emit_Block_SolidusGreaterThanSignKeyword_3_1_or___GreaterThanSignKeyword_3_0_0_BlockKeyword_3_0_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Control_SolidusGreaterThanSignKeyword_3_1_or___GreaterThanSignKeyword_3_0_0_ControlKeyword_3_0_2__.equals(syntax))
				emit_Control_SolidusGreaterThanSignKeyword_3_1_or___GreaterThanSignKeyword_3_0_0_ControlKeyword_3_0_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Sequence_SolidusGreaterThanSignKeyword_2_1_or___GreaterThanSignKeyword_2_0_0_SequenceKeyword_2_0_2__.equals(syntax))
				emit_Sequence_SolidusGreaterThanSignKeyword_2_1_or___GreaterThanSignKeyword_2_0_0_SequenceKeyword_2_0_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '/>' | ('>' '</block>')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '<block' (ambiguity) (rule start)
	 *     atomic=DEC '"' (ambiguity) (rule end)
	 *     info=STRING (ambiguity) (rule end)
	 */
	protected void emit_Block_SolidusGreaterThanSignKeyword_3_1_or___GreaterThanSignKeyword_3_0_0_BlockKeyword_3_0_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '/>' | ('>' '</control>')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '<control' (ambiguity) (rule start)
	 *     if=Expression '"' (ambiguity) (rule end)
	 *     info=STRING (ambiguity) (rule end)
	 *     timeout=DEC '"' (ambiguity) (rule end)
	 *     while=Expression '"' (ambiguity) (rule end)
	 */
	protected void emit_Control_SolidusGreaterThanSignKeyword_3_1_or___GreaterThanSignKeyword_3_0_0_ControlKeyword_3_0_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ',' (ambiguity) '!' expression=Primary
	 *     (rule start) ',' (ambiguity) 'DAP_Delay' '(' delay=Expression
	 *     (rule start) ',' (ambiguity) 'DAP_JTAG_Sequence' '(' cnt=Expression
	 *     (rule start) ',' (ambiguity) 'DAP_SWJ_Clock' '(' value=Expression
	 *     (rule start) ',' (ambiguity) 'DAP_SWJ_Pins' '(' pinout=Expression
	 *     (rule start) ',' (ambiguity) 'DAP_SWJ_Sequence' '(' cnt=Expression
	 *     (rule start) ',' (ambiguity) 'DAP_WriteABORT' '(' value=Expression
	 *     (rule start) ',' (ambiguity) 'LoadDebugInfo' '(' path=STRING
	 *     (rule start) ',' (ambiguity) 'Message' '(' type=Expression
	 *     (rule start) ',' (ambiguity) 'Query' '(' type=Expression
	 *     (rule start) ',' (ambiguity) 'QueryValue' '(' message=STRING
	 *     (rule start) ',' (ambiguity) 'Read16' '(' addr=Expression
	 *     (rule start) ',' (ambiguity) 'Read32' '(' addr=Expression
	 *     (rule start) ',' (ambiguity) 'Read64' '(' addr=Expression
	 *     (rule start) ',' (ambiguity) 'Read8' '(' addr=Expression
	 *     (rule start) ',' (ambiguity) 'ReadAP' '(' addr=Expression
	 *     (rule start) ',' (ambiguity) 'ReadDP' '(' addr=Expression
	 *     (rule start) ',' (ambiguity) 'Sequence' '(' '"' seqname=ID
	 *     (rule start) ',' (ambiguity) 'Write16' '(' addr=Expression
	 *     (rule start) ',' (ambiguity) 'Write32' '(' addr=Expression
	 *     (rule start) ',' (ambiguity) 'Write64' '(' addr=Expression
	 *     (rule start) ',' (ambiguity) 'Write8' '(' addr=Expression
	 *     (rule start) ',' (ambiguity) 'WriteAP' '(' addr=Expression
	 *     (rule start) ',' (ambiguity) 'WriteDP' '(' addr=Expression
	 *     (rule start) ',' (ambiguity) '~' expression=Primary
	 *     (rule start) ',' (ambiguity) value=DEC
	 *     (rule start) ',' (ambiguity) value=HEX
	 *     (rule start) ',' (ambiguity) value=STRING
	 *     (rule start) ',' (ambiguity) variable=[VariableDeclaration|ID]
	 *     (rule start) ',' (ambiguity) {And.left=}
	 *     (rule start) ',' (ambiguity) {Assignment.left=}
	 *     (rule start) ',' (ambiguity) {BitAnd.left=}
	 *     (rule start) ',' (ambiguity) {BitOr.left=}
	 *     (rule start) ',' (ambiguity) {BitXor.left=}
	 *     (rule start) ',' (ambiguity) {Comparison.left=}
	 *     (rule start) ',' (ambiguity) {Div.left=}
	 *     (rule start) ',' (ambiguity) {Equality.left=}
	 *     (rule start) ',' (ambiguity) {Minus.left=}
	 *     (rule start) ',' (ambiguity) {Mul.left=}
	 *     (rule start) ',' (ambiguity) {Or.left=}
	 *     (rule start) ',' (ambiguity) {Plus.left=}
	 *     (rule start) ',' (ambiguity) {Rem.left=}
	 *     (rule start) ',' (ambiguity) {Shift.left=}
	 *     (rule start) ',' (ambiguity) {Ternary.left=}
	 *     (rule start) (ambiguity) '!' expression=Primary
	 *     (rule start) (ambiguity) 'DAP_Delay' '(' delay=Expression
	 *     (rule start) (ambiguity) 'DAP_JTAG_Sequence' '(' cnt=Expression
	 *     (rule start) (ambiguity) 'DAP_SWJ_Clock' '(' value=Expression
	 *     (rule start) (ambiguity) 'DAP_SWJ_Pins' '(' pinout=Expression
	 *     (rule start) (ambiguity) 'DAP_SWJ_Sequence' '(' cnt=Expression
	 *     (rule start) (ambiguity) 'DAP_WriteABORT' '(' value=Expression
	 *     (rule start) (ambiguity) 'LoadDebugInfo' '(' path=STRING
	 *     (rule start) (ambiguity) 'Message' '(' type=Expression
	 *     (rule start) (ambiguity) 'Query' '(' type=Expression
	 *     (rule start) (ambiguity) 'QueryValue' '(' message=STRING
	 *     (rule start) (ambiguity) 'Read16' '(' addr=Expression
	 *     (rule start) (ambiguity) 'Read32' '(' addr=Expression
	 *     (rule start) (ambiguity) 'Read64' '(' addr=Expression
	 *     (rule start) (ambiguity) 'Read8' '(' addr=Expression
	 *     (rule start) (ambiguity) 'ReadAP' '(' addr=Expression
	 *     (rule start) (ambiguity) 'ReadDP' '(' addr=Expression
	 *     (rule start) (ambiguity) 'Sequence' '(' '"' seqname=ID
	 *     (rule start) (ambiguity) 'Write16' '(' addr=Expression
	 *     (rule start) (ambiguity) 'Write32' '(' addr=Expression
	 *     (rule start) (ambiguity) 'Write64' '(' addr=Expression
	 *     (rule start) (ambiguity) 'Write8' '(' addr=Expression
	 *     (rule start) (ambiguity) 'WriteAP' '(' addr=Expression
	 *     (rule start) (ambiguity) 'WriteDP' '(' addr=Expression
	 *     (rule start) (ambiguity) '~' expression=Primary
	 *     (rule start) (ambiguity) value=DEC
	 *     (rule start) (ambiguity) value=HEX
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) variable=[VariableDeclaration|ID]
	 *     (rule start) (ambiguity) {And.left=}
	 *     (rule start) (ambiguity) {Assignment.left=}
	 *     (rule start) (ambiguity) {BitAnd.left=}
	 *     (rule start) (ambiguity) {BitOr.left=}
	 *     (rule start) (ambiguity) {BitXor.left=}
	 *     (rule start) (ambiguity) {Comparison.left=}
	 *     (rule start) (ambiguity) {Div.left=}
	 *     (rule start) (ambiguity) {Equality.left=}
	 *     (rule start) (ambiguity) {Minus.left=}
	 *     (rule start) (ambiguity) {Mul.left=}
	 *     (rule start) (ambiguity) {Or.left=}
	 *     (rule start) (ambiguity) {Plus.left=}
	 *     (rule start) (ambiguity) {Rem.left=}
	 *     (rule start) (ambiguity) {Shift.left=}
	 *     (rule start) (ambiguity) {Ternary.left=}
	 */
	protected void emit_Primary_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {And.left=}
	 *     (rule start) (ambiguity) {Assignment.left=}
	 *     (rule start) (ambiguity) {BitAnd.left=}
	 *     (rule start) (ambiguity) {BitOr.left=}
	 *     (rule start) (ambiguity) {BitXor.left=}
	 *     (rule start) (ambiguity) {Comparison.left=}
	 *     (rule start) (ambiguity) {Div.left=}
	 *     (rule start) (ambiguity) {Equality.left=}
	 *     (rule start) (ambiguity) {Minus.left=}
	 *     (rule start) (ambiguity) {Mul.left=}
	 *     (rule start) (ambiguity) {Or.left=}
	 *     (rule start) (ambiguity) {Plus.left=}
	 *     (rule start) (ambiguity) {Rem.left=}
	 *     (rule start) (ambiguity) {Shift.left=}
	 *     (rule start) (ambiguity) {Ternary.left=}
	 */
	protected void emit_Primary_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '/>' | ('>' '</sequence>')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '<sequence' (ambiguity) (rule start)
	 *     disable=DEC '"' (ambiguity) (rule end)
	 *     info=STRING (ambiguity) (rule end)
	 *     name=ID '"' (ambiguity) (rule end)
	 *     pname=STRING (ambiguity) (rule end)
	 */
	protected void emit_Sequence_SolidusGreaterThanSignKeyword_2_1_or___GreaterThanSignKeyword_2_0_0_SequenceKeyword_2_0_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
