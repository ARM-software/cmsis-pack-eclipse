/*******************************************************************************
* Copyright (c) 2016 ARM Ltd. and others
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
* ARM Ltd and ARM Germany GmbH - Initial API and implementation
*******************************************************************************/

grammar com.arm.cmsis.pack.debugseq.DebugSeq with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate debugSeq "http://www.arm.com/cmsis/pack/debugseq/DebugSeq"

DebugSeqModel:
	debugvars = DebugVars
	sequences = Sequences?
;

DebugVars:
	{DebugVars} '<debugvars' (('configfile=' configfile=STRING)? & 
		('version=' version=STRING)? & 
		('Pname=' pname=STRING)?) '>'
		statements += Statement*
	'</debugvars>'
;

Statement:
	VariableDeclaration ';' | Expression ';'
;

VariableDeclaration:
	'__var' name=ID '=' value=Expression
;

Sequences:
	{Sequences} '<sequences>'
		sequences += Sequence*
	'</sequences>'
;

Sequence:
	'<sequence' (('name=' '"' name=ID '"') & 
		('disable=' '"' disable=DEC '"')? & 
		('Pname=' pname=STRING)? & 
		('info=' info=STRING)?)
	('>' codeblocks += CodeBlock* '</sequence>' | '/>')
;

CodeBlock:
	Block | Control
;

Block:
	{Block} '<block' (('atomic=' '"' atomic=DEC '"')? &
		('info=' info=STRING)?)
	('>' statements += Statement* '</block>' | '/>')
;

Control:
	{Control} '<control' (('if=' '"' if=Expression '"')? &
	  ('while=' '"' while=Expression '"')? &
	  ('timeout=' '"' timeout=DEC '"')? &
	  ('info=' info=STRING)?)
	('>' codeblocks += CodeBlock* '</control>' | '/>')
;

Expression: Assignment;

Assignment returns Expression:
	Ternary (
		{Assignment.left=current}
		op=('='|'+='|'-='|'*='|'/='|'%='|'&lt;&lt;='|'&gt;&gt;='|'&amp;='|'^='|'|=')
		right=Expression
	)?
;

Ternary returns Expression:
	Or ({Ternary.left=current} "?" exp1=Expression ":" exp2=Ternary)?
;

Or returns Expression:
	And ({Or.left=current} "||" right=And)*
;

And returns Expression:
	BitOr ({And.left=current} "&amp;&amp;" right=BitOr)*
;

BitOr returns Expression:
	BitXor ({BitOr.left=current} "|" right=BitXor)*
;

BitXor returns Expression:
	BitAnd ({BitXor.left=current} "^" right=BitAnd)*
;

BitAnd returns Expression:
	Equality ({BitAnd.left=current} "&amp;" right=Equality)*
;

Equality returns Expression:
	Comparison (
		{Equality.left=current} op=("=="|"!=")
		right=Comparison
	)*
;

Comparison returns Expression:
	Shift (
		{Comparison.left=current} op=("&gt;="|"&lt;="|"&gt;"|"&lt;")
		right=Shift
	)*
;

Shift returns Expression:
	PlusOrMinus (
		{Shift.left=current} op=("&lt;&lt;"|"&gt;&gt;")
		right=PlusOrMinus
	)*
;

PlusOrMinus returns Expression:
	MulOrDiv (
		({Plus.left=current} '+' | {Minus.left=current} '-')
		right=MulOrDiv
	)*
;

MulOrDiv returns Expression:
	Primary (
		({Mul.left=current} '*' | {Div.left=current} '/' | {Rem.left=current} '%')
		right=Primary
	)*
;

Primary returns Expression:
	'(' Expression ')' |
	{Not} "!" expression=Primary |
	{BitNot} "~" expression=Primary |
	FunctionCall |
	Atomic
;

Parameter:
	',' Expression
;

FunctionCall returns Expression:
	{SequenceCall} 'Sequence' '(' '"' seqname=ID '"' ')' |
	{Query} 'Query' '(' type=Expression ',' message=STRING ',' default=Expression ')' |
	{QueryValue} 'QueryValue' '(' message=STRING ',' default=Expression ')' |
	{Message} 'Message' '(' type=Expression ',' format=STRING parameters+=Parameter* ')' |
	{LoadDebugInfo} 'LoadDebugInfo' '(' path=STRING ')' |
	{Read8} 'Read8' '(' addr=Expression ')' |
	{Read16} 'Read16' '(' addr=Expression ')' |
	{Read32} 'Read32' '(' addr=Expression ')' |
	{Read64} 'Read64' '(' addr=Expression ')' |
	{ReadAP} 'ReadAP' '(' addr=Expression ')' |
	{ReadDP} 'ReadDP' '(' addr=Expression ')' |
	{Write8} 'Write8' '(' addr=Expression ',' val=Expression ')' |
	{Write16} 'Write16' '(' addr=Expression ',' val=Expression ')' |
	{Write32} 'Write32' '(' addr=Expression ',' val=Expression ')' |
	{Write64} 'Write64' '(' addr=Expression ',' val=Expression ')' |
	{WriteAP} 'WriteAP' '(' addr=Expression ',' val=Expression ')' |
	{WriteDP} 'WriteDP' '(' addr=Expression ',' val=Expression ')' |
	{DapDelay} 'DAP_Delay' '(' delay=Expression ')' |
	{DapWriteABORT} 'DAP_WriteABORT' '(' value=Expression ')' |
	{DapSwjPins} 'DAP_SWJ_Pins' '(' pinout=Expression ',' pinselect=Expression ',' pinwait=Expression ')' |
	{DapSwjClock} 'DAP_SWJ_Clock' '(' value=Expression ')' |
	{DapSwjSequence} 'DAP_SWJ_Sequence' '(' cnt=Expression ',' val=Expression ')' |
	{DapJtagSequence} 'DAP_JTAG_Sequence' '(' cnt=Expression ',' tms=Expression ',' tdi=Expression ')'
;

Atomic returns Expression:
	{IntConstant} value=(DEC | HEX) |
	{StringConstant} value=STRING |
	{VariableRef} variable=[VariableDeclaration]
;

terminal DEC returns ecore::ELong: ('0' | '1'..'9' '0'..'9'*);

terminal HEX returns ecore::ELong: ('0x' ('0'..'9' | 'a'..'f' | 'A'..'F')+);

terminal ML_COMMENT	: '<!--' -> '-->';
terminal STRING: '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';